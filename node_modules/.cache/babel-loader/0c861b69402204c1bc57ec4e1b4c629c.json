{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from '../../containers/Home/MoviesList/api';\nexport const initialise = page => {\n  console.log('[2]');\n  return {\n    type: actionTypes.INITIALISE,\n    page: page\n  };\n};\nexport const initialiseFiltres = () => {\n  return {\n    type: actionTypes.INITIALISE_FILTRES\n  };\n};\nexport const initialiseTextSearch = () => {\n  return {\n    type: actionTypes.INITIALISE_TEXTSEARCH\n  };\n};\nexport const filtres = filtres => {\n  return {\n    type: actionTypes.FILTRES,\n    filtres: filtres\n  };\n};\nexport const textSearch = textSearch => {\n  return {\n    type: actionTypes.TEXT_SEARCH,\n    textSearch: textSearch\n  };\n};\nexport const movies = (movies, nbPage, page, next, noResult) => {\n  return {\n    type: actionTypes.MOVIES,\n    newMovies: movies,\n    nbPage: nbPage,\n    page: page,\n    next: next,\n    noResult: noResult\n  };\n};\nexport const popularRequest = page => {\n  return dispatch => {\n    axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${page}`).then(response => {\n      dispatch(movies(response.data.results, response.data.total_pages, page, 'popular'));\n    }).catch(err => console.log(err));\n  };\n};\nexport const filtresRequest = (filtres, page) => {\n  return dispatch => {\n    let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_ADULT}${PATH_LANGUE}fr`;\n    if (!!filtres.genre.value) url += `&with_genres=${filtres.genre.value}`;\n    if (!!filtres.years.value) url += `&primary_release_year=${filtres.years.value}`;\n    if (!!filtres.sortby.value) url += `&sort_by=${filtres.sortby.value}`;\n    axios.get(url).then(response => {\n      dispatch(movies(response.data.results, response.data.total_pages, page, 'filtres'));\n    }).catch(err => console.log(err));\n  };\n};\nexport const textSearchRequest = (textSearch, page) => {\n  return dispatch => {\n    axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`).then(response => {\n      let noResult;\n      response.data.total_results === 0 ? noResult = true : noResult = false;\n      dispatch(movies(response.data.results, response.data.total_pages, page, 'textSearch', noResult));\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["/Users/miclaude/Desktop/Netflix_Project/src/store/actions/movies.js"],"names":["actionTypes","axios","API_KEY","PATH_BASE","PATH_DISCOVER","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","initialise","page","console","log","type","INITIALISE","initialiseFiltres","INITIALISE_FILTRES","initialiseTextSearch","INITIALISE_TEXTSEARCH","filtres","FILTRES","textSearch","TEXT_SEARCH","movies","nbPage","next","noResult","MOVIES","newMovies","popularRequest","dispatch","get","then","response","data","results","total_pages","catch","err","filtresRequest","url","genre","value","years","sortby","textSearchRequest","total_results"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from  '../../containers/Home/MoviesList/api';\n\nexport const initialise = (page) => {\n    console.log('[2]');\n    return {\n        type: actionTypes.INITIALISE,\n        page: page\n    }\n};\n\nexport const initialiseFiltres = () => {\n    return {\n        type: actionTypes.INITIALISE_FILTRES,\n    }\n};\n\nexport const initialiseTextSearch = () => {\n    return {\n        type: actionTypes.INITIALISE_TEXTSEARCH,\n    }\n};\n\nexport const filtres = (filtres) => {\n    return {\n        type: actionTypes.FILTRES,\n        filtres: filtres\n    }\n};\n\nexport const textSearch = (textSearch) => {\n    return {\n        type: actionTypes.TEXT_SEARCH,\n        textSearch: textSearch\n    }\n};\n\nexport const movies = (movies, nbPage, page, next, noResult) => {\n    return {\n        type: actionTypes.MOVIES,\n        newMovies: movies,\n        nbPage: nbPage,\n        page: page,\n        next: next,\n        noResult: noResult\n    }\n};\n\nexport const popularRequest = (page) => {\n    return dispatch => {\n        axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${page}`)\n            .then(response => {\n                dispatch(movies(response.data.results, response.data.total_pages, page, 'popular'));\n            })\n            .catch(err => console.log(err));\n    }\n};\n\nexport const filtresRequest = (filtres, page) => {\n    return dispatch => {\n        let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_ADULT}${PATH_LANGUE}fr`;\n        if (!!filtres.genre.value)\n            url += `&with_genres=${filtres.genre.value}`;\n        if (!!filtres.years.value)\n            url += `&primary_release_year=${filtres.years.value}`;\n        if (!!filtres.sortby.value)\n            url += `&sort_by=${filtres.sortby.value}`;\n        axios.get(url)\n            .then(response => {\n                dispatch(movies(response.data.results, response.data.total_pages, page, 'filtres'));\n            })\n            .catch(err => console.log(err));\n    }\n};\n\nexport const textSearchRequest = (textSearch, page) => {\n    return dispatch => {\n        axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`)\n            .then(response => {\n                let noResult ;\n                response.data.total_results === 0 ? noResult = true : noResult = false; \n                dispatch(movies(response.data.results, response.data.total_pages, page, 'textSearch', noResult));\n            })\n            .catch(err => console.log(err));\n    }\n};\n"]},"metadata":{},"sourceType":"module"}