{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from '../../containers/Home/MoviesList/api';\nexport const movies = movies => {\n  return {\n    type: actionTypes.MOVIES,\n    movies: movies,\n    page: page,\n    nbPage: nbPage\n  };\n};\nexport const popular = () => {\n  return dispatch => {\n    axios.get('https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=1').then(response => {\n      console.log('responsePopular ---> ', response.data);\n      dispatch(movies(response.data.results));\n    }).catch(err => console.log(err));\n  };\n};\nexport const filtres = filtres => {\n  return dispatch => {\n    let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_ADULT}${PATH_LANGUE}fr`;\n    if (!!filtres.genre.value) url += `&with_genres=${filtres.genre.value}`;\n    if (!!filtres.years.value) url += `&primary_release_year=${filtres.years.value}`;\n    if (!!filtres.sortby.value) url += `&sort_by=${filtres.sortby.value}`;\n    axios.get(url).then(response => {\n      dispatch(movies(response.data.results));\n    }).catch(err => console.log(err));\n  };\n};\nexport const textSearch = textSearch => {\n  return dispatch => {\n    if (!!textSearch) {\n      axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`).then(response => {\n        dispatch(movies(response.data.results));\n      }).catch(err => console.log(err));\n    } else {\n      dispatch(popular());\n    }\n  };\n};","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/store/actions/filtres.js"],"names":["actionTypes","axios","API_KEY","PATH_BASE","PATH_DISCOVER","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","movies","type","MOVIES","page","nbPage","popular","dispatch","get","then","response","console","log","data","results","catch","err","filtres","url","genre","value","years","sortby","textSearch"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,aAA7B,EAA4CC,UAA5C,EAAwDC,WAAxD,EAAqEC,SAArE,EAAgFC,UAAhF,EAA4FC,WAA5F,QAAgH,sCAAhH;AAEA,OAAO,MAAMC,MAAM,GAAIA,MAAD,IAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAEX,WAAW,CAACY,MADf;AAEHF,IAAAA,MAAM,EAAEA,MAFL;AAGHG,IAAAA,IAAI,EAAEA,IAHH;AAIHC,IAAAA,MAAM,EAAEA;AAJL,GAAP;AAMH,CAPM;AASP,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,SAAOC,QAAQ,IAAI;AACff,IAAAA,KAAK,CAACgB,GAAN,CAAU,wGAAV,EACKC,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCF,QAAQ,CAACG,IAA7C;AACAN,MAAAA,QAAQ,CAACN,MAAM,CAACS,QAAQ,CAACG,IAAT,CAAcC,OAAf,CAAP,CAAR;AACH,KAJL,EAKKC,KALL,CAKWC,GAAG,IAAIL,OAAO,CAACC,GAAR,CAAYI,GAAZ,CALlB;AAMH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMC,OAAO,GAAIA,OAAD,IAAa;AAChC,SAAOV,QAAQ,IAAI;AACf,QAAIW,GAAG,GAAI,GAAExB,SAAU,GAAEC,aAAc,GAAEC,UAAW,GAAEH,OAAQ,GAAEK,SAAU,IAAGC,UAAW,GAAEC,WAAY,IAAtG;AACA,QAAI,CAAC,CAACiB,OAAO,CAACE,KAAR,CAAcC,KAApB,EACIF,GAAG,IAAK,gBAAeD,OAAO,CAACE,KAAR,CAAcC,KAAM,EAA3C;AACJ,QAAI,CAAC,CAACH,OAAO,CAACI,KAAR,CAAcD,KAApB,EACIF,GAAG,IAAK,yBAAwBD,OAAO,CAACI,KAAR,CAAcD,KAAM,EAApD;AACJ,QAAI,CAAC,CAACH,OAAO,CAACK,MAAR,CAAeF,KAArB,EACIF,GAAG,IAAK,YAAWD,OAAO,CAACK,MAAR,CAAeF,KAAM,EAAxC;AACJ5B,IAAAA,KAAK,CAACgB,GAAN,CAAUU,GAAV,EACKT,IADL,CACUC,QAAQ,IAAI;AACdH,MAAAA,QAAQ,CAACN,MAAM,CAACS,QAAQ,CAACG,IAAT,CAAcC,OAAf,CAAP,CAAR;AACH,KAHL,EAIKC,KAJL,CAIWC,GAAG,IAAIL,OAAO,CAACC,GAAR,CAAYI,GAAZ,CAJlB;AAKH,GAbD;AAcH,CAfM;AAiBP,OAAO,MAAMO,UAAU,GAAIA,UAAD,IAAgB;AACtC,SAAOhB,QAAQ,IAAI;AACf,QAAI,CAAC,CAACgB,UAAN,EAAkB;AACd/B,MAAAA,KAAK,CAACgB,GAAN,CAAW,GAAEd,SAAU,GAAEG,WAAY,GAAED,UAAW,GAAEH,OAAQ,GAAEK,SAAU,IAAGE,WAAY,KAAID,UAAW,WAAUwB,UAAW,EAA3H,EACCd,IADD,CACMC,QAAQ,IAAI;AACdH,QAAAA,QAAQ,CAACN,MAAM,CAACS,QAAQ,CAACG,IAAT,CAAcC,OAAf,CAAP,CAAR;AACH,OAHD,EAICC,KAJD,CAIOC,GAAG,IAAIL,OAAO,CAACC,GAAR,CAAYI,GAAZ,CAJd;AAKH,KAND,MAOK;AACFT,MAAAA,QAAQ,CAACD,OAAO,EAAR,CAAR;AACF;AACJ,GAXD;AAYH,CAbM","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from  '../../containers/Home/MoviesList/api';\n\nexport const movies = (movies) => {\n    return {\n        type: actionTypes.MOVIES,\n        movies: movies,\n        page: page,\n        nbPage: nbPage,\n    }\n};\n\nexport const popular = () => {\n    return dispatch => {\n        axios.get('https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=1')\n            .then(response => {\n                console.log('responsePopular ---> ',response.data)\n                dispatch(movies(response.data.results));\n            })\n            .catch(err => console.log(err))\n    }\n}\n\nexport const filtres = (filtres) => {\n    return dispatch => {\n        let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_ADULT}${PATH_LANGUE}fr`;\n        if (!!filtres.genre.value)\n            url += `&with_genres=${filtres.genre.value}`;\n        if (!!filtres.years.value)\n            url += `&primary_release_year=${filtres.years.value}`;\n        if (!!filtres.sortby.value)\n            url += `&sort_by=${filtres.sortby.value}`;\n        axios.get(url)\n            .then(response => {\n                dispatch(movies(response.data.results));\n            })\n            .catch(err => console.log(err))\n    }\n}\n\nexport const textSearch = (textSearch) => {\n    return dispatch => {\n        if (!!textSearch) {\n            axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`)\n            .then(response => {\n                dispatch(movies(response.data.results));\n            })\n            .catch(err => console.log(err))\n        }\n        else {\n           dispatch(popular());\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}