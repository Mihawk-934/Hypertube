{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  cart: [{\n    title: 'FILM 1',\n    price: 1000,\n    id: 1,\n    qte: 1\n  }, {\n    title: 'FILM 2',\n    price: 2000,\n    id: 2,\n    qte: 1\n  }, {\n    title: 'FILM 3',\n    price: 3000,\n    id: 3,\n    qte: 1\n  }, {\n    title: 'FILM 4',\n    price: 4000,\n    id: 4,\n    qte: 1\n  }],\n  total: 0,\n  qte: 0\n};\n\nconst addToCart = state => {\n  let tab = [...state.cart];\n  let value = {\n    title: 'SIUUUUU',\n    price: 1000,\n    id: 5,\n    qte: 10\n  };\n  tab.push(value);\n  return updateObject(state, {\n    cart: tab\n  });\n};\n\nconst removeToCart = (state, action) => {\n  return updateObject(state, {\n    cart: state.cart.filter(cartItem => cartItem.id !== action.id)\n  });\n};\n\nconst resetCart = state => {\n  return updateObject(state, {\n    cart: []\n  });\n};\n\nconst increase = (state, action) => {\n  let tempCart = state.cart.map(cartItem => {\n    if (cartItem.id === action.id) cartItem = { ...cartItem,\n      qte: cartItem.qte + 1\n    };\n    return cartItem;\n  });\n  return { ...state,\n    cart: tempCart\n  };\n};\n\nconst decrease = (state, action) => {\n  let tempCart = state.cart.map(cartItem => {\n    if (cartItem.id === action.id) cartItem = { ...cartItem,\n      qte: cartItem.qte - 1\n    };\n    return cartItem;\n  });\n  return { ...state,\n    cart: tempCart\n  };\n};\n\nconst getTotals = state => {\n  let {\n    total,\n    qte\n  } = state.cart.reduce((cartTotal, cartItem) => {\n    const itemTotal = cartItem.price * cartItem.qte;\n    cartTotal.total += itemTotal;\n    cartTotal.qte += cartItem.qte;\n    return cartTotal;\n  }, {\n    total: 0,\n    qte: 0\n  });\n  total = parseFloat(total.toFixed(2));\n  return { ...state,\n    total,\n    qte\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      return addToCart(state, action);\n\n    case actionTypes.REMOVE_TO_CART:\n      return removeToCart(state, action);\n\n    case actionTypes.RESET_CART:\n      return resetCart(state, action);\n\n    case actionTypes.INCREASE:\n      return increase(state, action);\n\n    case actionTypes.DECREASE:\n      return decrease(state, action);\n\n    case actionTypes.GET_TOTAL:\n      return getTotals(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/miclaude/Desktop/Netflix/src/store/reducers/cart.js"],"names":["actionTypes","updateObject","initialState","cart","title","price","id","qte","total","addToCart","state","tab","value","push","removeToCart","action","filter","cartItem","resetCart","increase","tempCart","map","decrease","getTotals","reduce","cartTotal","itemTotal","parseFloat","toFixed","reducer","type","ADD_TO_CART","REMOVE_TO_CART","RESET_CART","INCREASE","DECREASE","GET_TOTAL"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,CACF;AACIC,IAAAA,KAAK,EAAE,QADX;AAEIC,IAAAA,KAAK,EAAE,IAFX;AAGIC,IAAAA,EAAE,EAAE,CAHR;AAIIC,IAAAA,GAAG,EAAG;AAJV,GADE,EAOF;AACIH,IAAAA,KAAK,EAAE,QADX;AAEIC,IAAAA,KAAK,EAAE,IAFX;AAGIC,IAAAA,EAAE,EAAE,CAHR;AAIIC,IAAAA,GAAG,EAAE;AAJT,GAPE,EAaF;AACIH,IAAAA,KAAK,EAAE,QADX;AAEIC,IAAAA,KAAK,EAAE,IAFX;AAGIC,IAAAA,EAAE,EAAE,CAHR;AAIIC,IAAAA,GAAG,EAAE;AAJT,GAbE,EAmBF;AACIH,IAAAA,KAAK,EAAE,QADX;AAEIC,IAAAA,KAAK,EAAE,IAFX;AAGIC,IAAAA,EAAE,EAAE,CAHR;AAIIC,IAAAA,GAAG,EAAE;AAJT,GAnBE,CADW;AA2BjBC,EAAAA,KAAK,EAAE,CA3BU;AA4BjBD,EAAAA,GAAG,EAAE;AA5BY,CAArB;;AA+BA,MAAME,SAAS,GAAIC,KAAD,IAAW;AACzB,MAAIC,GAAG,GAAE,CAAC,GAAGD,KAAK,CAACP,IAAV,CAAT;AACA,MAAIS,KAAK,GAAG;AACRR,IAAAA,KAAK,EAAE,SADC;AAERC,IAAAA,KAAK,EAAE,IAFC;AAGRC,IAAAA,EAAE,EAAE,CAHI;AAIRC,IAAAA,GAAG,EAAG;AAJE,GAAZ;AAMAI,EAAAA,GAAG,CAACE,IAAJ,CAASD,KAAT;AACF,SAAOX,YAAY,CAAES,KAAF,EAAS;AAAEP,IAAAA,IAAI,EAAEQ;AAAR,GAAT,CAAnB;AAED,CAXD;;AAaA,MAAMG,YAAY,GAAG,CAACJ,KAAD,EAAQK,MAAR,KAAmB;AACpC,SAAOd,YAAY,CAAES,KAAF,EAAS;AACxBP,IAAAA,IAAI,EAAEO,KAAK,CAACP,IAAN,CAAWa,MAAX,CAAmBC,QAAD,IAAcA,QAAQ,CAACX,EAAT,KAAgBS,MAAM,CAACT,EAAvD;AADkB,GAAT,CAAnB;AAGH,CAJD;;AAMA,MAAMY,SAAS,GAAIR,KAAD,IAAY;AAC1B,SAAOT,YAAY,CAAES,KAAF,EAAS;AAC1BP,IAAAA,IAAI,EAAE;AADoB,GAAT,CAAnB;AAGH,CAJD;;AAMA,MAAMgB,QAAQ,GAAG,CAACT,KAAD,EAAQK,MAAR,KAAmB;AAChC,MAAIK,QAAQ,GAAGV,KAAK,CAACP,IAAN,CAAWkB,GAAX,CAAeJ,QAAQ,IAAI;AACtC,QAAIA,QAAQ,CAACX,EAAT,KAAgBS,MAAM,CAACT,EAA3B,EACIW,QAAQ,GAAG,EAAE,GAAGA,QAAL;AAAeV,MAAAA,GAAG,EAAEU,QAAQ,CAACV,GAAT,GAAe;AAAnC,KAAX;AACJ,WAAOU,QAAP;AACH,GAJc,CAAf;AAKA,SAAO,EAAE,GAAGP,KAAL;AAAYP,IAAAA,IAAI,EAAEiB;AAAlB,GAAP;AACH,CAPD;;AASA,MAAME,QAAQ,GAAG,CAACZ,KAAD,EAAQK,MAAR,KAAmB;AAChC,MAAIK,QAAQ,GAAGV,KAAK,CAACP,IAAN,CAAWkB,GAAX,CAAeJ,QAAQ,IAAI;AACtC,QAAIA,QAAQ,CAACX,EAAT,KAAgBS,MAAM,CAACT,EAA3B,EACIW,QAAQ,GAAG,EAAE,GAAGA,QAAL;AAAeV,MAAAA,GAAG,EAAEU,QAAQ,CAACV,GAAT,GAAe;AAAnC,KAAX;AACJ,WAAOU,QAAP;AACH,GAJc,CAAf;AAKA,SAAO,EAAE,GAAGP,KAAL;AAAYP,IAAAA,IAAI,EAAEiB;AAAlB,GAAP;AACH,CAPD;;AASA,MAAMG,SAAS,GAAIb,KAAD,IAAW;AACzB,MAAI;AAAEF,IAAAA,KAAF;AAASD,IAAAA;AAAT,MAAiBG,KAAK,CAACP,IAAN,CAAWqB,MAAX,CACjB,CAACC,SAAD,EAAYR,QAAZ,KAAyB;AACrB,UAAMS,SAAS,GAAGT,QAAQ,CAACZ,KAAT,GAAiBY,QAAQ,CAACV,GAA5C;AACAkB,IAAAA,SAAS,CAACjB,KAAV,IAAmBkB,SAAnB;AACAD,IAAAA,SAAS,CAAClB,GAAV,IAAiBU,QAAQ,CAACV,GAA1B;AACA,WAAOkB,SAAP;AACH,GANgB,EAOjB;AACIjB,IAAAA,KAAK,EAAE,CADX;AAEID,IAAAA,GAAG,EAAE;AAFT,GAPiB,CAArB;AAYAC,EAAAA,KAAK,GAAGmB,UAAU,CAACnB,KAAK,CAACoB,OAAN,CAAc,CAAd,CAAD,CAAlB;AAEA,SAAO,EAAC,GAAGlB,KAAJ;AAAWF,IAAAA,KAAX;AAAkBD,IAAAA;AAAlB,GAAP;AACH,CAhBD;;AAkBA,MAAMsB,OAAO,GAAG,CAAEnB,KAAK,GAAGR,YAAV,EAAwBa,MAAxB,KAAoC;AAClD,UAASA,MAAM,CAACe,IAAhB;AACE,SAAK9B,WAAW,CAAC+B,WAAjB;AAA8B,aAAOtB,SAAS,CAACC,KAAD,EAAQK,MAAR,CAAhB;;AAC9B,SAAKf,WAAW,CAACgC,cAAjB;AAAiC,aAAOlB,YAAY,CAACJ,KAAD,EAAQK,MAAR,CAAnB;;AACjC,SAAKf,WAAW,CAACiC,UAAjB;AAA6B,aAAOf,SAAS,CAACR,KAAD,EAAQK,MAAR,CAAhB;;AAC7B,SAAKf,WAAW,CAACkC,QAAjB;AAA2B,aAAOf,QAAQ,CAACT,KAAD,EAAQK,MAAR,CAAf;;AAC3B,SAAKf,WAAW,CAACmC,QAAjB;AAA2B,aAAOb,QAAQ,CAACZ,KAAD,EAAQK,MAAR,CAAf;;AAC3B,SAAKf,WAAW,CAACoC,SAAjB;AAA4B,aAAOb,SAAS,CAACb,KAAD,CAAhB;;AAC5B;AAAS,aAAOA,KAAP;AAPX;AASD,CAVD;;AAYA,eAAemB,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    cart: [\n        {\n            title: 'FILM 1',\n            price: 1000,\n            id: 1,\n            qte : 1\n        },\n        {\n            title: 'FILM 2',\n            price: 2000,\n            id: 2,\n            qte: 1\n        },\n        {\n            title: 'FILM 3',\n            price: 3000,\n            id: 3,\n            qte: 1\n        },\n        {\n            title: 'FILM 4',\n            price: 4000,\n            id: 4,\n            qte: 1\n        },\n    ],\n    total: 0,\n    qte: 0\n};\n\nconst addToCart = (state) => {\n    let tab= [...state.cart];\n    let value = {\n        title: 'SIUUUUU',\n        price: 1000,\n        id: 5,\n        qte : 10\n    }\n    tab.push(value)\n  return updateObject( state, { cart: tab\n  })\n}\n\nconst removeToCart = (state, action) => {\n    return updateObject( state, { \n        cart: state.cart.filter((cartItem) => cartItem.id !== action.id)\n    })\n}\n\nconst resetCart = (state ) => {\n    return updateObject( state, { \n      cart: []\n    })\n}\n\nconst increase = (state, action) => {\n    let tempCart = state.cart.map(cartItem => {\n        if (cartItem.id === action.id)\n            cartItem = { ...cartItem, qte: cartItem.qte + 1 };\n        return cartItem;\n    })\n    return { ...state, cart: tempCart }\n}\n\nconst decrease = (state, action) => {\n    let tempCart = state.cart.map(cartItem => {\n        if (cartItem.id === action.id)\n            cartItem = { ...cartItem, qte: cartItem.qte - 1 };\n        return cartItem;\n    })\n    return { ...state, cart: tempCart }\n}\n\nconst getTotals = (state) => {\n    let { total, qte } = state.cart.reduce(\n        (cartTotal, cartItem) => {\n            const itemTotal = cartItem.price * cartItem.qte;\n            cartTotal.total += itemTotal;\n            cartTotal.qte += cartItem.qte;\n            return cartTotal;\n        },\n        {\n            total: 0,\n            qte: 0\n        }\n    );\n    total = parseFloat(total.toFixed(2));\n\n    return {...state, total, qte}\n}\n\nconst reducer = ( state = initialState, action ) => {\n  switch ( action.type ) {\n    case actionTypes.ADD_TO_CART: return addToCart(state, action);\n    case actionTypes.REMOVE_TO_CART: return removeToCart(state, action);\n    case actionTypes.RESET_CART: return resetCart(state, action);\n    case actionTypes.INCREASE: return increase(state, action);\n    case actionTypes.DECREASE: return decrease(state, action);\n    case actionTypes.GET_TOTAL: return getTotals(state);\n    default: return state;\n  }\n}; \n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}