{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx\";\nimport React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\n\nclass MoviesList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      page: 1,\n      hasMore: true\n    };\n\n    this.newMovie = () => {\n      this.setState({\n        p\n      });\n\n      if (this.props.nbPage !== 0 && this.state.page > this.props.nbPage) {\n        this.setState({\n          hasMore: false\n        });\n      } // else if (this.props.next === 'popular') {\n      //   this.props.popularRequest(this.props.page + 1);\n      // }\n      else if (this.props.next === 'filtres') {\n          this.setState({});\n          this.props.filtresRequest(this.props.filtres, this.props.page + 1);\n        } else if (this.props.next === 'textSearch') {\n          this.props.textSearchRequest(this.props.textSearch, this.props.page + 1);\n        } // popular aussi a simplifier\n        else {\n            this.props.popularRequest(this.state.page);\n          }\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.movies.length);\n    if (this.props.movies.length === 0) this.newMovie();\n  } //IL FAUT REINITIALISER LESFILTRES QUAND TEXTSEARCH ET INVERSE.\n\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.filtres !== this.props.filtres) {\n      this.setState(prevState => ({\n        page: 1\n      }), () => {\n        this.props.initialiseMovies(); // this.props.initialisePage();\n\n        this.props.filtresRequest(this.props.filtres, this.state.page);\n      });\n    } else if (prevProps.textSearch !== this.props.textSearch) {\n      this.setState(prevState => ({\n        page: 1\n      }), () => {\n        this.props.initialiseMovies();\n        this.props.initialisePage();\n        this.props.textSearchRequest(this.props.textSearch, this.state.page);\n      });\n    }\n  }\n\n  render() {\n    let movies = null;\n    if (this.props.movies !== null && this.props.movies.length > 0) movies = /*#__PURE__*/React.createElement(MovieItems, {\n      movies: this.props.movies,\n      clicked: () => this.clicked(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }\n    });\n    if (this.props.movies.length === 0) movies = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 16\n      }\n    }, \"Il y a 0 resultat.\"); //CREER UNE VARIABLE DANS LE STORE ET L'UTILISER POUR FAIRE DES IF ELSE IF ET SAVOIR QUE METTRE DANS NEXT EN FONCTION DES FITLRES.\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      dataLength: this.props.movies.length,\n      next: this.newMovie,\n      hasMore: this.state.hasMore,\n      loader: /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 19\n        }\n      }, \"Loading...\"),\n      endMessage: /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 58\n        }\n      }, \"Yay! Vous avez tout vu\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, movies));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    page: state.filtres.page,\n    nbPage: state.filtres.nbPage,\n    filtres: state.filtres.filtres,\n    textSearch: state.filtres.textSearch,\n    movies: state.filtres.movies,\n    next: state.filtres.next\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initialisePage: () => dispatch(actions.initialisePage()),\n    initialiseMovies: () => dispatch(actions.initialiseMovies()),\n    popularRequest: page => dispatch(actions.popularRequest(page)),\n    filtresRequest: (filtres, page) => dispatch(actions.filtresRequest(filtres, page)),\n    textSearchRequest: (textSearch, page) => dispatch(actions.textSearchRequest(textSearch, page))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesList);","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx"],"names":["React","Component","InfiniteScroll","connect","MovieItems","actions","MoviesList","state","page","hasMore","newMovie","setState","p","props","nbPage","next","filtresRequest","filtres","textSearchRequest","textSearch","popularRequest","componentDidMount","console","log","movies","length","componentDidUpdate","prevProps","prevState","initialiseMovies","initialisePage","render","clicked","color","textAlign","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\n\nclass MoviesList extends Component {\n  state = {\n    page: 1,\n    hasMore: true,\n  }\n \n  componentDidMount () {\n    console.log(this.props.movies.length);\n    if (this.props.movies.length === 0)\n      this.newMovie();\n  }\n\n  //IL FAUT REINITIALISER LESFILTRES QUAND TEXTSEARCH ET INVERSE.\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.filtres !== this.props.filtres) {\n      this.setState((prevState) => ({page: 1}), () => {\n        this.props.initialiseMovies();\n        // this.props.initialisePage();\n        this.props.filtresRequest(this.props.filtres, this.state.page);\n      })\n    }\n    else if (prevProps.textSearch !== this.props.textSearch) {\n      this.setState((prevState) => ({page: 1}), () => {\n      this.props.initialiseMovies();\n      this.props.initialisePage();\n      this.props.textSearchRequest(this.props.textSearch, this.state.page);\n      })\n    } \n  }\n\n  newMovie = () => {\n    this.setState({p})\n    if (this.props.nbPage !== 0 && this.state.page > this.props.nbPage) {\n      this.setState({ hasMore: false });\n    }\n    // else if (this.props.next === 'popular') {\n    //   this.props.popularRequest(this.props.page + 1);\n    // }\n    else if (this.props.next === 'filtres') {\n      this.setState({})\n      this.props.filtresRequest(this.props.filtres, this.props.page + 1);\n    }\n    else if (this.props.next === 'textSearch') {\n      this.props.textSearchRequest(this.props.textSearch, this.props.page + 1);\n    }\n    // popular aussi a simplifier\n    else {\n      this.props.popularRequest(this.state.page);\n    }\n  };\n\n  render() {\n    let movies = null;\n    if (this.props.movies !== null && this.props.movies.length > 0) \n      movies = <MovieItems movies={this.props.movies} clicked={() => this.clicked()}/>\n    if (this.props.movies.length === 0)\n      movies = <p style={{ color: \"white\" }}>Il y a 0 resultat.</p>\n\n    //CREER UNE VARIABLE DANS LE STORE ET L'UTILISER POUR FAIRE DES IF ELSE IF ET SAVOIR QUE METTRE DANS NEXT EN FONCTION DES FITLRES.\n    return (\n      <div className=\"block\">\n        <InfiniteScroll\n          dataLength={this.props.movies.length}\n          next={this.newMovie}\n          hasMore={this.state.hasMore}\n          loader={<h4>Loading...</h4>}\n          endMessage={<p style={{ textAlign: \"center\" }}><b>Yay! Vous avez tout vu</b></p>}>\n          {movies}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    page: state.filtres.page,\n    nbPage: state.filtres.nbPage,\n    filtres: state.filtres.filtres,\n    textSearch: state.filtres.textSearch,\n    movies: state.filtres.movies,\n    next: state.filtres.next\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initialisePage: () => dispatch(actions.initialisePage()),\n    initialiseMovies: () => dispatch(actions.initialiseMovies()),\n    popularRequest: (page) => dispatch(actions.popularRequest(page)),\n    filtresRequest: (filtres, page) => dispatch(actions.filtresRequest(filtres, page)),\n    textSearchRequest: (textSearch, page)=> dispatch(actions.textSearchRequest(textSearch, page))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesList);"]},"metadata":{},"sourceType":"module"}