{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport { withRouter } from 'react-router-dom';\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from './api';\n\nclass MoviesList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: []\n    };\n\n    this.searchMovies = () => {\n      axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${this.props.textSearch}`).then(response => {\n        this.setState({\n          movies: response.data.results\n        });\n      });\n    };\n\n    this.filterMovies = () => {\n      let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_ADULT}${PATH_LANGUE}fr`;\n      if (!!this.props.genre) url += `&with_genres=${this.props.genre}`;\n      if (!!this.props.years) url += `&primary_release_year=${this.props.years}`;\n      if (!!this.props.ordre) url += `&sort_by=${this.props.ordre}`;\n      axios.get(url).then(response => {\n        this.setState({\n          movies: response.data.results\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log('didmount', this.props.textSearch);\n    if (this.props.textSearch !== null) this.searchMovies();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.textSearch !== this.props.textSearch) this.searchMovies();else if (prevProps.genre !== this.props.genre || prevProps.years !== this.props.years || prevProps.note !== this.props.note || prevProps.ordre !== this.props.ordre) this.filterMovies();\n  }\n\n  render() {\n    let movies = null;\n    if (this.state.movies !== null && this.state.movies.length > 0) movies = /*#__PURE__*/React.createElement(MovieItems, {\n      movies: this.state.movies,\n      clicked: () => this.clicked(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 16\n      }\n    });\n    if (this.state.movies.length === 0) movies = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 16\n      }\n    }, \"Il y a 0 resultat pour: \\\"\", this.props.textSearch, \"\\\".\");\n    let asyncPagination = null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      dataLength: this.state.movies.length,\n      next: asyncPagination,\n      hasMore: this.state.hasMore,\n      loader: /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 19\n        }\n      }, \"Loading...\"),\n      endMessage: /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 58\n        }\n      }, \"Yay! You have seen it all\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, movies));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    genre: state.filtres.genre.value,\n    years: state.filtres.years.value,\n    ordre: state.filtres.ordre.value,\n    textSearch: state.filtres.textSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeGenre: genre => dispatch(actions.genre(genre)),\n    changeYears: years => dispatch(actions.years(years)),\n    changeOrdre: ordre => dispatch(actions.ordre(ordre)),\n    actionTextSearch: () => dispatch(actions.textSearch(null))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MoviesList));","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx"],"names":["React","Component","axios","InfiniteScroll","connect","withRouter","MovieItems","actions","API_KEY","PATH_BASE","PATH_DISCOVER","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","MoviesList","state","movies","searchMovies","get","page","props","textSearch","then","response","setState","data","results","filterMovies","url","genre","years","ordre","componentDidMount","console","log","componentDidUpdate","prevProps","note","render","length","clicked","color","asyncPagination","hasMore","textAlign","mapStateToProps","filtres","value","mapDispatchToProps","dispatch","changeGenre","changeYears","changeOrdre","actionTextSearch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport { withRouter } from 'react-router-dom';\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\n\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from  './api';\n\nclass MoviesList extends Component {\n  state = {\n    movies: [],\n  };\n\n  componentDidMount () {\n    console.log('didmount',this.props.textSearch)\n    if (this.props.textSearch !== null)\n      this.searchMovies();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.textSearch !== this.props.textSearch) \n     this.searchMovies();\n    else if (prevProps.genre !== this.props.genre || prevProps.years !== this.props.years || prevProps.note !== this.props.note || prevProps.ordre !== this.props.ordre)\n      this.filterMovies();\n  };\n\n  searchMovies = () => {\n      axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${this.props.textSearch}`)\n      .then(response => {\n        this.setState({movies : response.data.results});\n      })\n  };\n\n  filterMovies = () => {\n    let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_ADULT}${PATH_LANGUE}fr`;\n      if (!!this.props.genre) \n        url += `&with_genres=${this.props.genre}`;\n      if (!!this.props.years)\n        url += `&primary_release_year=${this.props.years}`;\n      if (!!this.props.ordre)\n        url += `&sort_by=${this.props.ordre}`;\n\n      axios.get(url)\n      .then(response => {\n        this.setState({movies: response.data.results})\n      })\n  }\n\n  \n\n  render() {\n    let movies = null;\n    if (this.state.movies !== null && this.state.movies.length > 0) \n      movies = <MovieItems movies={this.state.movies} clicked={() => this.clicked()}/>\n    if (this.state.movies.length === 0)\n      movies = <p style={{ color: \"white\" }}>Il y a 0 resultat pour: \"{this.props.textSearch}\".</p>\n    \n    let asyncPagination = null;\n\n    return (\n      <div className=\"block\">\n        <InfiniteScroll\n          dataLength={this.state.movies.length}\n          next={asyncPagination}\n          hasMore={this.state.hasMore}\n          loader={<h4>Loading...</h4>}\n          endMessage={<p style={{ textAlign: \"center\" }}><b>Yay! You have seen it all</b></p>}>\n          {movies}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    genre: state.filtres.genre.value,\n    years: state.filtres.years.value,\n    ordre: state.filtres.ordre.value,\n    textSearch: state.filtres.textSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    \n    changeGenre: (genre) => dispatch(actions.genre(genre)),\n    changeYears: (years) => dispatch(actions.years(years)),\n    changeOrdre: (ordre) => dispatch(actions.ordre(ordre)),\n    actionTextSearch: () => dispatch(actions.textSearch(null))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MoviesList));"]},"metadata":{},"sourceType":"module"}