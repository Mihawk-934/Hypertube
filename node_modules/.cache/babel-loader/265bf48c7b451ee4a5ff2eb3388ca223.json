{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/Netflix_Project/src/containers/Movie/Movie.jsx\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport Video from './Video/Video';\nimport Slider from './Slider/Slider';\nimport { Container } from 'react-bootstrap';\nimport Presentation from './Presentation/Presentation';\nimport './Movie.css';\nimport Aos from 'aos';\nimport 'aos/dist/aos.css';\n\nclass MovieId extends Component {\n  constructor(...args) {\n    super(...args);\n    this._isMounted = false;\n    this.state = {\n      movie: '',\n      genre: [],\n      years: '',\n      youtubeKey: '',\n      id: '',\n      acteurs: []\n    };\n\n    this.infoMovie = () => {\n      this.setState({\n        id: this.props.match.params.id\n      }, () => {\n        axios.get(`https://api.themoviedb.org/3/movie/${this.state.id}?api_key=1e32f5c452c2267d5367589e9864ab1c&append_to_response=videos,credits&language=fr&include_adult=false`).then(response => this.setState({\n          movie: response.data,\n          genre: response.data.genres,\n          years: response.data.release_date.substr(0, 4)\n        }, console.log(response.data))).catch(error => console.log(error));\n        axios.get(`https://api.themoviedb.org/3/movie/${this.state.id}/credits?api_key=1e32f5c452c2267d5367589e9864ab1c`).then(response => {\n          let acteurs = response.data.cast.splice(0, 4);\n          acteurs = acteurs.map(acteur => {\n            return { ...acteur,\n              img: true\n            };\n          });\n          this.setState({\n            acteurs: acteurs\n          });\n        }).catch(err => console.log(err));\n        window.scrollTo(0, 0);\n      });\n    };\n\n    this.idVideoYoutube = () => {\n      axios.get(`https://api.themoviedb.org/3/movie/${this.state.movie.id}?api_key=ee52528a3d2bfff0312880daeaee21b3&append_to_response=videos&language=fr&include_adult=false`).then(response => {\n        this.setState({\n          youtubeKey: response.data.videos.results[0].key\n        }, () => console.log('videos ---> ', response.data.videos.results));\n      }).catch(error => {\n        this.setState({\n          youtubeKey: null\n        });\n      }); //je remet la youtubeKey a null quand il n'y a pas d'ID youtube pour ce film.\n    };\n\n    this.submit = e => {\n      e.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    Aos.init();\n    this._isMounted = true;\n    if (this._isMounted) this.infoMovie();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.params.id !== prevProps.match.params.id) this.infoMovie();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    let movieBackdropStyles = null;\n\n    if (!!this.state.movie.backdrop_path) {\n      movieBackdropStyles = {\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${this.state.movie.backdrop_path})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: '100vh',\n        backgroundColor: 'black',\n        backgroundPosition: 'center'\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Page\",\n      style: movieBackdropStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: \"Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      \"data-aos\": \"flip-left\",\n      \"data-aos-duration\": \"2000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, this.state.movie && /*#__PURE__*/React.createElement(Presentation, {\n      movie: this.state.movie,\n      youtubeKey: this.state.youtubeKey,\n      years: this.state.years,\n      acteurs: this.state.acteurs,\n      genre: this.state.genre,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 46\n      }\n    }), this.state.youtubeKey && /*#__PURE__*/React.createElement(Video, {\n      id: this.state.youtubeKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 51\n      }\n    }), /*#__PURE__*/React.createElement(Slider, {\n      idMovie: this.state.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\n;\nexport default withRouter(MovieId);","map":{"version":3,"sources":["/Users/miclaude/Desktop/Netflix_Project/src/containers/Movie/Movie.jsx"],"names":["React","Component","withRouter","axios","Video","Slider","Container","Presentation","Aos","MovieId","_isMounted","state","movie","genre","years","youtubeKey","id","acteurs","infoMovie","setState","props","match","params","get","then","response","data","genres","release_date","substr","console","log","catch","error","cast","splice","map","acteur","img","err","window","scrollTo","idVideoYoutube","videos","results","key","submit","e","preventDefault","componentDidMount","init","componentDidUpdate","prevProps","componentWillUnmount","render","movieBackdropStyles","backdrop_path","backgroundImage","backgroundRepeat","backgroundSize","minHeight","backgroundColor","backgroundPosition"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport Video from './Video/Video';\nimport Slider from './Slider/Slider';\nimport { Container } from 'react-bootstrap';\nimport Presentation from './Presentation/Presentation';\nimport './Movie.css';\nimport Aos from 'aos';\nimport 'aos/dist/aos.css';\n\nclass MovieId extends Component {\n    _isMounted = false;\n    state = {\n        movie : '',\n        genre: [],\n        years: '',\n        youtubeKey: '',\n        id: '',\n        acteurs: []\n    };\n\n    componentDidMount () {\n        Aos.init();\n        this._isMounted = true;\n        if (this._isMounted)\n\n            this.infoMovie();\n    };\n\n    componentDidUpdate (prevProps) {\n        if (this.props.match.params.id !== prevProps.match.params.id)\n            this.infoMovie();\n    };\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    };\n\n    infoMovie = () => {\n        this.setState({id: this.props.match.params.id}, () => {\n            axios.get(`https://api.themoviedb.org/3/movie/${this.state.id}?api_key=1e32f5c452c2267d5367589e9864ab1c&append_to_response=videos,credits&language=fr&include_adult=false`)\n                .then(response => \n                    this.setState({movie : response.data, genre : response.data.genres, years: response.data.release_date.substr(0, 4)}, console.log(response.data))\n                )\n                \n                .catch(error => console.log(error));\n            axios.get(`https://api.themoviedb.org/3/movie/${this.state.id}/credits?api_key=1e32f5c452c2267d5367589e9864ab1c`)\n                .then(response => {\n                    let acteurs = response.data.cast.splice(0, 4);\n                    acteurs = acteurs.map(acteur => {\n                        return {\n                            ...acteur,\n                            img: true\n                        }\n                    })\n                    this.setState({acteurs: acteurs})\n                })\n                .catch(err => console.log(err))\n            window.scrollTo(0, 0);\n        });\n    };\n\n    idVideoYoutube = () => {\n        axios.get(`https://api.themoviedb.org/3/movie/${this.state.movie.id}?api_key=ee52528a3d2bfff0312880daeaee21b3&append_to_response=videos&language=fr&include_adult=false`)\n            .then(response => {this.setState({youtubeKey: response.data.videos.results[0].key}, () => console.log('videos ---> ', response.data.videos.results))})\n            .catch(error => {this.setState({youtubeKey: null})}); //je remet la youtubeKey a null quand il n'y a pas d'ID youtube pour ce film.\n    };\n\n    submit = (e) => {\n        e.preventDefault();\n    };\n\n    render () { \n        let movieBackdropStyles = null;\n        if (!!this.state.movie.backdrop_path) {\n            movieBackdropStyles = {\n                backgroundImage: `url(https://image.tmdb.org/t/p/original/${this.state.movie.backdrop_path})`,\n                backgroundRepeat: 'no-repeat',\n                backgroundSize:'cover',\n                minHeight:'100vh',\n                backgroundColor: 'black',\n                backgroundPosition:'center' \n            };\n        }\n\n        return (\n            <div className=\"Page\" style={movieBackdropStyles}>\n                <Container className='Container'>\n                    <div data-aos=\"flip-left\" data-aos-duration=\"2000\">\n                        {this.state.movie && <Presentation\n                        movie={this.state.movie}\n                        youtubeKey={this.state.youtubeKey}\n                        years={this.state.years}\n                        acteurs={this.state.acteurs} \n                        genre={this.state.genre}/>}\n                        {this.state.youtubeKey && <Video id={this.state.youtubeKey}/>}\n                        <Slider idMovie={this.state.id}/>\n                    </div>\n                </Container>\n            </div>\n        );\n    };\n};\n\nexport default withRouter(MovieId);\n"]},"metadata":{},"sourceType":"module"}