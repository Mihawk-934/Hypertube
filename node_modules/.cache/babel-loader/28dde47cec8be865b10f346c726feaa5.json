{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx\";\nimport React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\nimport axios from 'axios';\n\nclass MoviesList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      page: 1\n    };\n\n    this.newMovie = async () => {\n      try {\n        if (this.state.nbPage !== 0 && this.state.page > this.state.nbPage) {\n          this.setState({\n            hasMore: false\n          });\n          return;\n        }\n\n        let response = await axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${this.state.page}`);\n        this.setState({\n          nbPage: response.data.total_pages\n        }, () => {\n          this.setMovies(response.data.results);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.setMovies = movies => {\n      const oldMovies = this.state.page !== 1 ? this.state.movies : [];\n      const updateMovies = this.uniqueArray([...oldMovies, ...movies]);\n      this.setState(prevState => ({\n        movies: updateMovies,\n        page: prevState.page + 1\n      }));\n    };\n  }\n\n  componentDidMount() {\n    // this.props.popular(this.props.page);\n    this.newMovie();\n  } // componentDidUpdate (prevProps) {\n  //   if (prevProps.movies !== this.props.movies) {\n  //     console.log('OKKKKKKKKKKKKKKKKKK');\n  //     console.log(prevProps.movies);\n  //     console.log(this.props.movies);\n  //   }\n  // };\n\n\n  render() {\n    let movies = null;\n    if (this.props.movies !== null && this.props.movies.length > 0) movies = /*#__PURE__*/React.createElement(MovieItems, {\n      movies: this.props.movies,\n      clicked: () => this.clicked(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 16\n      }\n    });\n    if (this.props.movies.length === 0) movies = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 16\n      }\n    }, \"Il y a 0 resultat.\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      dataLength: this.props.movies.length // next={this.props.popular(this.props.page)}\n      ,\n      next: this.newMovie,\n      hasMore: this.props.hasMore,\n      loader: /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 19\n        }\n      }, \"Loading...\"),\n      endMessage: /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 58\n        }\n      }, \"Yay! Vous avez tout vu\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, movies));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log('moviesList', state);\n  return {\n    page: state.filtres.page,\n    hasMore: state.filtres.hasMore,\n    movies: state.filtres.movies\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    popular: page => dispatch(actions.popular(page))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesList);","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx"],"names":["React","Component","InfiniteScroll","connect","MovieItems","actions","axios","MoviesList","state","page","newMovie","nbPage","setState","hasMore","response","get","data","total_pages","setMovies","results","error","console","log","movies","oldMovies","updateMovies","uniqueArray","prevState","componentDidMount","render","props","length","clicked","color","textAlign","mapStateToProps","filtres","mapDispatchToProps","dispatch","popular"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,kBAAP;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,8BAAzB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,SAAyBN,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAEjCO,KAFiC,GAEzB;AACNC,MAAAA,IAAI,EAAG;AADD,KAFyB;;AAAA,SAmBjCC,QAnBiC,GAmBtB,YAAY;AACrB,UAAI;AACF,YAAI,KAAKF,KAAL,CAAWG,MAAX,KAAsB,CAAtB,IAA2B,KAAKH,KAAL,CAAWC,IAAX,GAAkB,KAAKD,KAAL,CAAWG,MAA5D,EAAoE;AAClE,eAAKC,QAAL,CAAc;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAd;AACA;AACD;;AACD,YAAIC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,wGAAuG,KAAKP,KAAL,CAAWC,IAAK,EAAlI,CAArB;AACA,aAAKG,QAAL,CAAc;AAAED,UAAAA,MAAM,EAAEG,QAAQ,CAACE,IAAT,CAAcC;AAAxB,SAAd,EAAqD,MAAM;AACzD,eAAKC,SAAL,CAAeJ,QAAQ,CAACE,IAAT,CAAcG,OAA7B;AACD,SAFD;AAGD,OATD,CASE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KAhCgC;;AAAA,SAkCjCF,SAlCiC,GAkCrBK,MAAM,IAAI;AACpB,YAAMC,SAAS,GAAG,KAAKhB,KAAL,CAAWC,IAAX,KAAoB,CAApB,GAAwB,KAAKD,KAAL,CAAWe,MAAnC,GAA4C,EAA9D;AACA,YAAME,YAAY,GAAG,KAAKC,WAAL,CAAiB,CAAC,GAAGF,SAAJ,EAAe,GAAGD,MAAlB,CAAjB,CAArB;AACA,WAAKX,QAAL,CAAce,SAAS,KAAK;AAACJ,QAAAA,MAAM,EAAEE,YAAT;AAAuBhB,QAAAA,IAAI,EAAEkB,SAAS,CAAClB,IAAV,GAAiB;AAA9C,OAAL,CAAvB;AACD,KAtCgC;AAAA;;AAKjCmB,EAAAA,iBAAiB,GAAI;AACnB;AACA,SAAKlB,QAAL;AAED,GATgC,CAWjC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAuBAmB,EAAAA,MAAM,GAAG;AACP,QAAIN,MAAM,GAAG,IAAb;AACA,QAAI,KAAKO,KAAL,CAAWP,MAAX,KAAsB,IAAtB,IAA8B,KAAKO,KAAL,CAAWP,MAAX,CAAkBQ,MAAlB,GAA2B,CAA7D,EACER,MAAM,gBAAG,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,KAAKO,KAAL,CAAWP,MAA/B;AAAuC,MAAA,OAAO,EAAE,MAAM,KAAKS,OAAL,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAT;AACF,QAAI,KAAKF,KAAL,CAAWP,MAAX,CAAkBQ,MAAlB,KAA6B,CAAjC,EACER,MAAM,gBAAG;AAAG,MAAA,KAAK,EAAE;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAT;AAEF,wBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AACE,MAAA,UAAU,EAAE,KAAKH,KAAL,CAAWP,MAAX,CAAkBQ,MADhC,CAEE;AAFF;AAGE,MAAA,IAAI,EAAE,KAAKrB,QAHb;AAIE,MAAA,OAAO,EAAE,KAAKoB,KAAL,CAAWjB,OAJtB;AAKE,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALV;AAME,MAAA,UAAU,eAAE;AAAG,QAAA,KAAK,EAAE;AAAEqB,UAAAA,SAAS,EAAE;AAAb,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAnC,CANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGX,MAPH,CADF,CADF;AAaD;;AA5DgC;;AA+DnC,MAAMY,eAAe,GAAG3B,KAAK,IAAI;AAC/Ba,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0Bd,KAA1B;AACA,SAAO;AACLC,IAAAA,IAAI,EAAED,KAAK,CAAC4B,OAAN,CAAc3B,IADf;AAELI,IAAAA,OAAO,EAAEL,KAAK,CAAC4B,OAAN,CAAcvB,OAFlB;AAGLU,IAAAA,MAAM,EAAEf,KAAK,CAAC4B,OAAN,CAAcb;AAHjB,GAAP;AAKD,CAPD;;AASA,MAAMc,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLC,IAAAA,OAAO,EAAG9B,IAAD,IAAU6B,QAAQ,CAACjC,OAAO,CAACkC,OAAR,CAAgB9B,IAAhB,CAAD;AADtB,GAAP;AAGD,CAJD;;AAMA,eAAeN,OAAO,CAACgC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C9B,UAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\n\nimport axios from 'axios';\n\nclass MoviesList extends Component {\n\n  state = {\n    page : 1\n  }\n  componentDidMount () {\n    // this.props.popular(this.props.page);\n    this.newMovie();\n\n  }\n\n  // componentDidUpdate (prevProps) {\n  //   if (prevProps.movies !== this.props.movies) {\n  //     console.log('OKKKKKKKKKKKKKKKKKK');\n  //     console.log(prevProps.movies);\n  //     console.log(this.props.movies);\n  //   }\n  // };\n\n  newMovie = async () => {\n    try {\n      if (this.state.nbPage !== 0 && this.state.page > this.state.nbPage) {\n        this.setState({ hasMore: false });\n        return;\n      }\n      let response = await axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${this.state.page}`);\n      this.setState({ nbPage: response.data.total_pages }, () => {\n        this.setMovies(response.data.results);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  setMovies = movies => {\n    const oldMovies = this.state.page !== 1 ? this.state.movies : [];\n    const updateMovies = this.uniqueArray([...oldMovies, ...movies]);\n    this.setState(prevState => ({movies: updateMovies, page: prevState.page + 1}));\n  };\n\n  render() {\n    let movies = null;\n    if (this.props.movies !== null && this.props.movies.length > 0) \n      movies = <MovieItems movies={this.props.movies} clicked={() => this.clicked()}/>\n    if (this.props.movies.length === 0)\n      movies = <p style={{ color: \"white\" }}>Il y a 0 resultat.</p>\n\n    return (\n      <div className=\"block\">\n        <InfiniteScroll\n          dataLength={this.props.movies.length}\n          // next={this.props.popular(this.props.page)}\n          next={this.newMovie}\n          hasMore={this.props.hasMore}\n          loader={<h4>Loading...</h4>}\n          endMessage={<p style={{ textAlign: \"center\" }}><b>Yay! Vous avez tout vu</b></p>}>\n          {movies}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  console.log('moviesList', state)\n  return {\n    page: state.filtres.page,\n    hasMore: state.filtres.hasMore,\n    movies: state.filtres.movies,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    popular: (page) => dispatch(actions.popular(page))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesList);"]},"metadata":{},"sourceType":"module"}