{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport { withRouter } from 'react-router-dom';\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from './api';\n\nclass MoviesList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      page: 1,\n      hasMore: true,\n      nbPage: 0\n    };\n\n    this.searchMovies = async () => {\n      // console.log('entrer dans [searchMovies]');\n      // console.log('[searchMovie] nbPage :', this.state.nbPage, '   page:' ,this.state.page);\n      try {\n        if (this.state.nbPage !== 0 && this.state.page > this.state.nbPage) {\n          console.log('[searchMovie] hasMore');\n          this.setState({\n            hasMore: false\n          });\n          return;\n        }\n\n        let response = await axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${this.props.textSearch}`);\n        this.setState({\n          nbPage: response.data.total_pages\n        }, () => {\n          this.setMovies(response.data.results); // console.log('[searchMovie] reponse --> ',response.data.results);\n          // console.log('[searchMovie] nbPage --> ', this.state.nbPage);\n          // console.log('[searchMovie] page --> ', this.state.page);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.newMovie = async () => {\n      console.log('entrer dans [newMovie]');\n      console.log('[newMovie] nbPage :', this.state.nbPage, '   page:', this.state.page);\n\n      try {\n        if (this.state.nbPage !== 0 && this.state.page > this.state.nbPage) {\n          // console.log('[newMovie] hasMore');\n          this.setState({\n            hasMore: false\n          });\n          return;\n        }\n\n        let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_ADULT}${PATH_LANGUE}fr`;\n        if (!!this.props.genre) url += `&with_genres=${this.props.genre}`;\n        if (!!this.props.years) url += `&primary_release_year=${this.props.years}`;\n        if (!!this.props.ordre) url += `&sort_by=${this.props.ordre}`;\n        let response = await axios.get(url);\n        this.setState({\n          nbPage: response.data.total_pages\n        }, () => {\n          this.setMovies(response.data.results); // console.log('[newMovie] reponse --> ',response.data.results);\n          // console.log('[newMovie] nbPage --> ', this.state.nbPage);\n          // console.log('[newMovie] page --> ', this.state.page);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.uniqueArray = a => {\n      // console.log('entrer dans [uniqueArray]');\n      return [...new Set(a.map(o => o.id))].map(id => a.find(i => i.id === id));\n    };\n\n    this.setMovies = movies => {\n      // console.log('entrer dans [setMovie]');\n      // console.log('[setMovies] page:    ', this.state.page, '    nbPage: ', this.state.nbPage);\n      const oldMovies = this.state.page !== 1 ? this.state.movies : [];\n      const updateMovies = this.uniqueArray([...oldMovies, ...movies]);\n      this.setState(prevState => ({\n        movies: updateMovies,\n        page: prevState.page + 1\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.newMovie();\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log('entrer dans [ComponentDidUpdate]');\n\n    if (prevProps.genre !== this.props.genre || prevProps.years !== this.props.years || prevProps.note !== this.props.note || prevProps.ordre !== this.props.ordre) {\n      console.log('[ComponentDidUpdate] if');\n      this.props.actionTextSearch();\n      this.setState({\n        page: 1,\n        nbPage: 0\n      }, () => this.newMovie());\n      return;\n    } else if (prevProps.textSearch !== this.props.textSearch) {\n      console.log('[ComponentDidUpdate] elseIf');\n      this.props.changeGenre({\n        value: '',\n        label: 'Genre'\n      });\n      this.props.changeYears({\n        value: '',\n        label: 'Annee'\n      });\n      this.props.changeOrdre({\n        value: 'popularity.desc',\n        label: 'PopularitÃ© desc'\n      });\n    }\n  }\n\n  render() {\n    let movies = null;\n    if (this.state.movies !== null && this.state.movies.length > 0) movies = /*#__PURE__*/React.createElement(MovieItems, {\n      movies: this.state.movies,\n      clicked: () => this.clicked(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 16\n      }\n    });\n    if (this.state.movies.length === 0) movies = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 16\n      }\n    }, \"Il y a 0 resultat pour: \\\"\", this.props.textSearch, \"\\\".\");\n    let asyncPagination = null; // const filtres = this.props.genre || this.props.note || this.props.years || this.props.ordre;\n    // if (!!filtres) {\n\n    asyncPagination = this.newMovie; //fonctionne correctement sans this.seatchMovies en alternant provoque beug.\n    // }\n\n    if (!!this.props.textSearch) {\n      asyncPagination = this.searchMovies;\n    } //Je dois gerer textSearch a null quand un filtres un enclencher\n    // sinon Beug car il ecrase les donnes de asyncPagination\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      dataLength: this.state.movies.length,\n      next: asyncPagination,\n      hasMore: this.state.hasMore,\n      loader: /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 19\n        }\n      }, \"Loading...\"),\n      endMessage: /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 58\n        }\n      }, \"Yay! You have seen it all\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, movies));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    genre: state.filtres.genre.value,\n    years: state.filtres.years.value,\n    ordre: state.filtres.ordre.value,\n    textSearch: state.filtres.textSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeGenre: genre => dispatch(actions.genre(genre)),\n    changeYears: years => dispatch(actions.years(years)),\n    changeOrdre: ordre => dispatch(actions.ordre(ordre)),\n    actionTextSearch: () => dispatch(actions.textSearch(null))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MoviesList));","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx"],"names":["React","Component","axios","InfiniteScroll","connect","withRouter","MovieItems","actions","API_KEY","PATH_BASE","PATH_DISCOVER","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","MoviesList","state","movies","page","hasMore","nbPage","searchMovies","console","log","setState","response","get","props","textSearch","data","total_pages","setMovies","results","error","newMovie","url","genre","years","ordre","uniqueArray","a","Set","map","o","id","find","i","oldMovies","updateMovies","prevState","componentDidMount","componentDidUpdate","prevProps","note","actionTextSearch","changeGenre","value","label","changeYears","changeOrdre","render","length","clicked","color","asyncPagination","textAlign","mapStateToProps","filtres","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport { withRouter } from 'react-router-dom';\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\n\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from  './api';\n\nclass MoviesList extends Component {\n  state = {\n    movies: [],\n    page: 1,\n    hasMore: true,\n    nbPage: 0\n  };\n\n  componentDidMount() {\n    this.newMovie();\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log('entrer dans [ComponentDidUpdate]');\n    if (prevProps.genre !== this.props.genre || prevProps.years !== this.props.years || prevProps.note !== this.props.note || prevProps.ordre !== this.props.ordre) {\n      console.log('[ComponentDidUpdate] if');\n      this.props.actionTextSearch();\n      this.setState({page : 1, nbPage: 0}, () => this.newMovie());\n      return;\n    }\n\n    else if (prevProps.textSearch !== this.props.textSearch) {\n      console.log('[ComponentDidUpdate] elseIf')\n      this.props.changeGenre({ value: '', label: 'Genre' });\n      this.props.changeYears({ value: '', label: 'Annee' });\n      this.props.changeOrdre({ value: 'popularity.desc', label: 'PopularitÃ© desc' });\n    \n  \n    }\n  };\n\n  searchMovies = async () => {\n    // console.log('entrer dans [searchMovies]');\n    // console.log('[searchMovie] nbPage :', this.state.nbPage, '   page:' ,this.state.page);\n    try {\n      if (this.state.nbPage !== 0 && this.state.page > this.state.nbPage) {\n        console.log('[searchMovie] hasMore');\n        this.setState({ hasMore: false });\n        return;\n      }\n\n      let response = await axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${this.props.textSearch}`);\n      this.setState({ nbPage: response.data.total_pages }, () => {\n        this.setMovies(response.data.results);\n        // console.log('[searchMovie] reponse --> ',response.data.results);\n        // console.log('[searchMovie] nbPage --> ', this.state.nbPage);\n        // console.log('[searchMovie] page --> ', this.state.page);\n      });\n    } catch (error) {\n        console.log(error);\n    }\n  };\n\n  newMovie = async () => {\n    console.log('entrer dans [newMovie]');\n    console.log('[newMovie] nbPage :', this.state.nbPage, '   page:' ,this.state.page);\n    try {\n      if (this.state.nbPage !== 0 && this.state.page > this.state.nbPage) {\n        // console.log('[newMovie] hasMore');\n        this.setState({ hasMore: false });\n        return;\n      }\n\n      let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_ADULT}${PATH_LANGUE}fr`;\n      if (!!this.props.genre) \n        url += `&with_genres=${this.props.genre}`;\n      if (!!this.props.years)\n        url += `&primary_release_year=${this.props.years}`;\n      if (!!this.props.ordre)\n        url += `&sort_by=${this.props.ordre}`;\n      let response = await axios.get(url);\n      this.setState({ nbPage: response.data.total_pages }, () => {\n        this.setMovies(response.data.results);\n        // console.log('[newMovie] reponse --> ',response.data.results);\n        // console.log('[newMovie] nbPage --> ', this.state.nbPage);\n        // console.log('[newMovie] page --> ', this.state.page);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  uniqueArray = a => {\n    // console.log('entrer dans [uniqueArray]');\n    return [...new Set(a.map(o => o.id))].map(id => a.find(i => i.id === id));\n  };\n\n  setMovies = movies => {\n    // console.log('entrer dans [setMovie]');\n    // console.log('[setMovies] page:    ', this.state.page, '    nbPage: ', this.state.nbPage);\n    const oldMovies = this.state.page !== 1 ? this.state.movies : [];\n    const updateMovies = this.uniqueArray([...oldMovies, ...movies]);\n    this.setState(prevState => ({movies: updateMovies, page: prevState.page + 1}));\n  };\n\n  render() {\n    let movies = null;\n    if (this.state.movies !== null && this.state.movies.length > 0) \n      movies = <MovieItems movies={this.state.movies} clicked={() => this.clicked()}/>\n    if (this.state.movies.length === 0)\n      movies = <p style={{ color: \"white\" }}>Il y a 0 resultat pour: \"{this.props.textSearch}\".</p>\n    \n    let asyncPagination = null;\n    // const filtres = this.props.genre || this.props.note || this.props.years || this.props.ordre;\n    // if (!!filtres) {\n    asyncPagination = this.newMovie; //fonctionne correctement sans this.seatchMovies en alternant provoque beug.\n    // }\n    if (!!this.props.textSearch)  {\n      asyncPagination = this.searchMovies;\n    }\n    //Je dois gerer textSearch a null quand un filtres un enclencher\n    // sinon Beug car il ecrase les donnes de asyncPagination\n\n    return (\n      <div className=\"block\">\n        <InfiniteScroll\n          dataLength={this.state.movies.length}\n          next={asyncPagination}\n          hasMore={this.state.hasMore}\n          loader={<h4>Loading...</h4>}\n          endMessage={<p style={{ textAlign: \"center\" }}><b>Yay! You have seen it all</b></p>}>\n          {movies}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    genre: state.filtres.genre.value,\n    years: state.filtres.years.value,\n    ordre: state.filtres.ordre.value,\n    textSearch: state.filtres.textSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    \n    changeGenre: (genre) => dispatch(actions.genre(genre)),\n    changeYears: (years) => dispatch(actions.years(years)),\n    changeOrdre: (ordre) => dispatch(actions.ordre(ordre)),\n    actionTextSearch: () => dispatch(actions.textSearch(null))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MoviesList));"]},"metadata":{},"sourceType":"module"}