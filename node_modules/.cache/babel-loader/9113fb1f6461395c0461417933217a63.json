{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/Netflix_Project/src/containers/Movie/Movie.jsx\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport Video from './Video/Video';\nimport Slider from './Slider/Slider';\nimport { Container } from 'react-bootstrap';\nimport Presentation from './Presentation/Presentation';\nimport './Movie.css';\nimport Aos from 'aos';\nimport 'aos/dist/aos.css';\n\nclass MovieId extends Component {\n  constructor(...args) {\n    super(...args);\n    this._isMounted = false;\n    this.state = {\n      movie: '',\n      genre: [],\n      years: '',\n      youtubeKey: '',\n      id: '',\n      acteurs: []\n    };\n\n    this.infoMovie = () => {\n      axios.get(`https://api.themoviedb.org/3/movie/${this.id}?api_key=1e32f5c452c2267d5367589e9864ab1c&append_to_response=videos,credits,similar&language=fr`).then(response => {\n        let acteurs = response.data.credits.cast.splice(0, 4);\n        acteurs = acteurs.map(acteur => {\n          return { ...acteur,\n            img: true\n          };\n        });\n        let similar = response.data.similar.results.splice(0, 19);\n        let youtubeKey = response.data.videos.results[0].key;\n        let data = { ...response.data,\n          release_date: response.data.release_date.substr(0, 4),\n          acteurs: acteurs,\n          similar: similar,\n          youtubeKey: youtubeKey\n        };\n        console.log(data);\n      }).catch(err => console.log(err));\n    };\n\n    this.idVideoYoutube = () => {\n      axios.get(`https://api.themoviedb.org/3/movie/${this.state.movie.id}?api_key=ee52528a3d2bfff0312880daeaee21b3&append_to_response=videos&language=fr&include_adult=false`).then(response => {\n        this.setState({\n          youtubeKey: response.data.videos.results[0].key\n        }, () => console.log('videos ---> ', response.data.videos.results));\n      }).catch(error => {\n        this.setState({\n          youtubeKey: null\n        });\n      }); //je remet la youtubeKey a null quand il n'y a pas d'ID youtube pour ce film.\n    };\n\n    this.submit = e => {\n      e.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    Aos.init();\n    this._isMounted = true;\n    if (this._isMounted) this.infoMovie();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.params.id !== prevProps.match.params.id) this.infoMovie();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    let movieBackdropStyles = null;\n\n    if (!!this.state.movie.backdrop_path) {\n      movieBackdropStyles = {\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${this.state.movie.backdrop_path})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: '100vh',\n        backgroundColor: 'black',\n        backgroundPosition: 'center'\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Page\",\n      style: movieBackdropStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: \"Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      \"data-aos\": \"flip-left\",\n      \"data-aos-duration\": \"2000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, this.state.movie && /*#__PURE__*/React.createElement(Presentation, {\n      movie: this.state.movie,\n      youtubeKey: this.state.youtubeKey,\n      years: this.state.years,\n      acteurs: this.state.acteurs,\n      genre: this.state.genre,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 46\n      }\n    }), this.state.youtubeKey && /*#__PURE__*/React.createElement(Video, {\n      id: this.state.youtubeKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 51\n      }\n    }), /*#__PURE__*/React.createElement(Slider, {\n      idMovie: this.state.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\n;\nexport default withRouter(MovieId);","map":{"version":3,"sources":["/Users/miclaude/Desktop/Netflix_Project/src/containers/Movie/Movie.jsx"],"names":["React","Component","withRouter","axios","Video","Slider","Container","Presentation","Aos","MovieId","_isMounted","state","movie","genre","years","youtubeKey","id","acteurs","infoMovie","get","then","response","data","credits","cast","splice","map","acteur","img","similar","results","videos","key","release_date","substr","console","log","catch","err","idVideoYoutube","setState","error","submit","e","preventDefault","componentDidMount","init","componentDidUpdate","prevProps","props","match","params","componentWillUnmount","render","movieBackdropStyles","backdrop_path","backgroundImage","backgroundRepeat","backgroundSize","minHeight","backgroundColor","backgroundPosition"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport Video from './Video/Video';\nimport Slider from './Slider/Slider';\nimport { Container } from 'react-bootstrap';\nimport Presentation from './Presentation/Presentation';\nimport './Movie.css';\n\nimport Aos from 'aos';\nimport 'aos/dist/aos.css';\n\nclass MovieId extends Component {\n    _isMounted = false;\n    state = {\n        movie : '',\n        genre: [],\n        years: '',\n        youtubeKey: '',\n        id: '',\n        acteurs: []\n    };\n\n    componentDidMount () {\n        Aos.init();\n        this._isMounted = true;\n        if (this._isMounted)\n            this.infoMovie();\n    };\n\n    componentDidUpdate (prevProps) {\n        if (this.props.match.params.id !== prevProps.match.params.id)\n            this.infoMovie();\n    };\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    };\n\n    infoMovie = () => {\n        axios.get(`https://api.themoviedb.org/3/movie/${this.id}?api_key=1e32f5c452c2267d5367589e9864ab1c&append_to_response=videos,credits,similar&language=fr`)\n            .then(response => {\n            let acteurs = response.data.credits.cast.splice(0, 4);\n            acteurs = acteurs.map(acteur => {\n                return {...acteur,\n                    img: true\n                }\n            })\n            let similar = response.data.similar.results.splice(0, 19);\n            let youtubeKey = response.data.videos.results[0].key;\n            \n            let data = {...response.data, release_date: response.data.release_date.substr(0, 4), acteurs : acteurs, similar : similar, youtubeKey : youtubeKey}\n            console.log(data)\n            \n\n        }\n    )\n    .catch(err => console.log(err));\n    };\n\n\n    idVideoYoutube = () => {\n        axios.get(`https://api.themoviedb.org/3/movie/${this.state.movie.id}?api_key=ee52528a3d2bfff0312880daeaee21b3&append_to_response=videos&language=fr&include_adult=false`)\n            .then(response => {this.setState({youtubeKey: response.data.videos.results[0].key}, () => console.log('videos ---> ', response.data.videos.results))})\n            .catch(error => {this.setState({youtubeKey: null})}); //je remet la youtubeKey a null quand il n'y a pas d'ID youtube pour ce film.\n    };\n\n    submit = (e) => {\n        e.preventDefault();\n    };\n\n    render () { \n        let movieBackdropStyles = null;\n        if (!!this.state.movie.backdrop_path) {\n            movieBackdropStyles = {\n                backgroundImage: `url(https://image.tmdb.org/t/p/original/${this.state.movie.backdrop_path})`,\n                backgroundRepeat: 'no-repeat',\n                backgroundSize:'cover',\n                minHeight:'100vh',\n                backgroundColor: 'black',\n                backgroundPosition:'center' \n            };\n        }\n\n        return (\n            <div className=\"Page\" style={movieBackdropStyles}>\n                <Container className='Container'>\n                    <div data-aos=\"flip-left\" data-aos-duration=\"2000\">\n                        {this.state.movie && <Presentation\n                        movie={this.state.movie}\n                        youtubeKey={this.state.youtubeKey}\n                        years={this.state.years}\n                        acteurs={this.state.acteurs} \n                        genre={this.state.genre}/>}\n                        {this.state.youtubeKey && <Video id={this.state.youtubeKey}/>}\n                        <Slider idMovie={this.state.id}/>\n                    </div>\n                </Container>\n            </div>\n        );\n    };\n};\n\nexport default withRouter(MovieId);\n"]},"metadata":{},"sourceType":"module"}