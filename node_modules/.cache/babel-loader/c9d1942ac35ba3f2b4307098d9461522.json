{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from '../../containers/Home/MoviesList/api';\nexport const initialise = () => {\n  return {\n    type: actionTypes.INITIALISE\n  };\n};\nexport const initialiseFiltres = () => {\n  return {\n    type: actionTypes.INITIALISE_FILTRES\n  };\n};\nexport const initialiseTextSearch = () => {\n  return {\n    type: actionTypes.INITIALISE_TEXTSEARCH\n  };\n};\nexport const filtres = filtres => {\n  return {\n    type: actionTypes.FILTRES,\n    filtres: filtres\n  };\n};\nexport const textSearch = textSearch => {\n  return {\n    type: actionTypes.TEXT_SEARCH,\n    textSearch: textSearch\n  };\n};\nexport const movies = (movies, nbPage, page, next, noResult) => {\n  return {\n    type: actionTypes.MOVIES,\n    newMovies: movies,\n    nbPage: nbPage,\n    page: page,\n    next: next,\n    noResult: noResult\n  };\n};\nexport const infoMovie = years => {\n  return {\n    type: actionTypes.INFO_MOVIE,\n    data: data,\n    acteurs\n  };\n};\nexport const movieData = id => {\n  return dispatch => {\n    axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=1e32f5c452c2267d5367589e9864ab1c&append_to_response=videos,credits&language=fr&include_adult=false`).then(response => {\n      let data = response.data;\n    } // axios.get(`https://api.themoviedb.org/3/movie/${this.state.id}/credits?api_key=1e32f5c452c2267d5367589e9864ab1c`)\n    // .then(response => {\n    //     let acteurs = response.data.cast.splice(0, 4);\n    //     acteurs = acteurs.map(acteur => {\n    //         return {\n    //             ...acteur,\n    //             img: true\n    //         }\n    //     })\n    //     this.setState({acteurs: acteurs})\n    // })\n    // dispatch() \n    // this.setState({movie : response.data, genre : response.data.genres, years: response.data.release_date.substr(0, 4)}, () => this.idVideoYoutube())\n    ).catch(err => console.log(err));\n  };\n};\nexport const popularRequest = page => {\n  return dispatch => {\n    axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${page}`).then(response => {\n      dispatch(movies(response.data.results, response.data.total_pages, page, 'popular'));\n    }).catch(err => console.log(err));\n  };\n};\nexport const filtresRequest = (filtres, page) => {\n  return dispatch => {\n    let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_ADULT}${PATH_LANGUE}fr`;\n    if (!!filtres.genre.value) url += `&with_genres=${filtres.genre.value}`;\n    if (!!filtres.years.value) url += `&primary_release_year=${filtres.years.value}`;\n    if (!!filtres.sortby.value) url += `&sort_by=${filtres.sortby.value}`;\n    axios.get(url).then(response => {\n      dispatch(movies(response.data.results, response.data.total_pages, page, 'filtres'));\n    }).catch(err => console.log(err));\n  };\n};\nexport const textSearchRequest = (textSearch, page) => {\n  return dispatch => {\n    axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`).then(response => {\n      let noResult;\n      response.data.total_results === 0 ? noResult = true : noResult = false;\n      dispatch(movies(response.data.results, response.data.total_pages, page, 'textSearch', noResult));\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["/Users/miclaude/Desktop/Netflix_Project/src/store/actions/movies.js"],"names":["actionTypes","axios","API_KEY","PATH_BASE","PATH_DISCOVER","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","initialise","type","INITIALISE","initialiseFiltres","INITIALISE_FILTRES","initialiseTextSearch","INITIALISE_TEXTSEARCH","filtres","FILTRES","textSearch","TEXT_SEARCH","movies","nbPage","page","next","noResult","MOVIES","newMovies","infoMovie","years","INFO_MOVIE","data","acteurs","movieData","id","dispatch","get","then","response","catch","err","console","log","popularRequest","results","total_pages","filtresRequest","url","genre","value","sortby","textSearchRequest","total_results"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from  '../../containers/Home/MoviesList/api';\n\nexport const initialise = () => {\n    return {\n        type: actionTypes.INITIALISE,\n    }\n};\n\nexport const initialiseFiltres = () => {\n    return {\n        type: actionTypes.INITIALISE_FILTRES,\n    }\n};\n\nexport const initialiseTextSearch = () => {\n    return {\n        type: actionTypes.INITIALISE_TEXTSEARCH,\n    }\n};\n\nexport const filtres = (filtres) => {\n    return {\n        type: actionTypes.FILTRES,\n        filtres: filtres\n    }\n};\n\nexport const textSearch = (textSearch) => {\n    return {\n        type: actionTypes.TEXT_SEARCH,\n        textSearch: textSearch\n    }\n};\n\nexport const movies = (movies, nbPage, page, next, noResult) => {\n    return {\n        type: actionTypes.MOVIES,\n        newMovies: movies,\n        nbPage: nbPage,\n        page: page,\n        next: next,\n        noResult: noResult \n    }\n};\n\nexport const infoMovie = (years,) => {\n    return {\n        type: actionTypes.INFO_MOVIE,\n        data: data,\n        acteurs\n    }\n}\n\nexport const movieData = (id) => {\n    return dispatch => {\n        axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=1e32f5c452c2267d5367589e9864ab1c&append_to_response=videos,credits&language=fr&include_adult=false`)\n            .then(response => {\n                let data = response.data\n\n            }\n               \n\n\n                // axios.get(`https://api.themoviedb.org/3/movie/${this.state.id}/credits?api_key=1e32f5c452c2267d5367589e9864ab1c`)\n                // .then(response => {\n                //     let acteurs = response.data.cast.splice(0, 4);\n                //     acteurs = acteurs.map(acteur => {\n                //         return {\n                //             ...acteur,\n                //             img: true\n                //         }\n                //     })\n                //     this.setState({acteurs: acteurs})\n                // })\n\n                // dispatch() \n                // this.setState({movie : response.data, genre : response.data.genres, years: response.data.release_date.substr(0, 4)}, () => this.idVideoYoutube())\n            )\n            .catch(err => console.log(err));\n    }\n}\n\nexport const popularRequest = (page) => {\n    return dispatch => {\n        axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${page}`)\n            .then(response => {\n                dispatch(movies(response.data.results, response.data.total_pages, page, 'popular'));\n            })\n            .catch(err => console.log(err));\n    }\n};\n\nexport const filtresRequest = (filtres, page) => {\n    return dispatch => {\n        let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_ADULT}${PATH_LANGUE}fr`;\n        if (!!filtres.genre.value)\n            url += `&with_genres=${filtres.genre.value}`;\n        if (!!filtres.years.value)\n            url += `&primary_release_year=${filtres.years.value}`;\n        if (!!filtres.sortby.value)\n            url += `&sort_by=${filtres.sortby.value}`;\n        axios.get(url)\n            .then(response => {\n                dispatch(movies(response.data.results, response.data.total_pages, page, 'filtres'));\n            })\n            .catch(err => console.log(err));\n    }\n};\n\nexport const textSearchRequest = (textSearch, page) => {\n    return dispatch => {\n        axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`)\n            .then(response => {\n                let noResult ;\n                response.data.total_results === 0 ? noResult = true : noResult = false; \n                dispatch(movies(response.data.results, response.data.total_pages, page, 'textSearch', noResult));\n            })\n            .catch(err => console.log(err));\n    }\n};\n"]},"metadata":{},"sourceType":"module"}