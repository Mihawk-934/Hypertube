{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport { withRouter } from 'react-router-dom';\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from './api';\n\nclass MoviesList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: []\n    };\n\n    this.searchMovies = () => {\n      axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${this.props.textSearch}`).then(response => {\n        this.setState({\n          movies: response.data.results\n        }, () => {\n          this.props.changeGenre({\n            value: '',\n            label: 'Genre'\n          });\n          this.props.changeYears({\n            value: '',\n            label: 'Annee'\n          });\n          this.props.changeOrdre({\n            value: 'popularity.desc',\n            label: 'PopularitÃ© desc'\n          });\n        });\n      });\n    };\n\n    this.filterMovies = () => {\n      let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_ADULT}${PATH_LANGUE}fr`;\n      if (!!this.props.genre) url += `&with_genres=${this.props.genre}`;\n      if (!!this.props.years) url += `&primary_release_year=${this.props.years}`;\n      if (!!this.props.ordre) url += `&sort_by=${this.props.ordre}`;\n      axios.get(url).then(response => {\n        this.setState({\n          movies: response.data.results\n        }, () => {\n          this.props.actionTextSearch();\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log('genre --->', this.props.genre);\n    console.log('texte --->', this.props.te);\n    if (this.props.textSearch !== null) this.searchMovies();else if (this.props.genre !== null || this.props.years !== null || this.props.note !== null) this.filterMovies();\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log('sssssssssssss  ', this.props.textSearch);\n    if (prevProps.textSearch !== this.props.textSearch && this.props.textSearch !== '') this.searchMovies();else if (prevProps.genre !== this.props.genre || prevProps.years !== this.props.years || prevProps.note !== this.props.note || prevProps.ordre !== this.props.ordre) this.filterMovies();\n  }\n\n  render() {\n    let movies = null;\n    if (this.state.movies !== null && this.state.movies.length > 0) movies = /*#__PURE__*/React.createElement(MovieItems, {\n      movies: this.state.movies,\n      clicked: () => this.clicked(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 16\n      }\n    });\n    if (this.state.movies.length === 0) movies = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 16\n      }\n    }, \"Il y a 0 resultat pour: \\\"\", this.props.textSearch, \"\\\".\");\n    let asyncPagination = null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      dataLength: this.state.movies.length,\n      next: asyncPagination,\n      hasMore: this.state.hasMore,\n      loader: /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 19\n        }\n      }, \"Loading...\"),\n      endMessage: /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 58\n        }\n      }, \"Yay! You have seen it all\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, movies));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    genre: state.filtres.genre.value,\n    years: state.filtres.years.value,\n    ordre: state.filtres.ordre.value,\n    textSearch: state.filtres.textSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeGenre: genre => dispatch(actions.genre(genre)),\n    changeYears: years => dispatch(actions.years(years)),\n    changeOrdre: ordre => dispatch(actions.ordre(ordre)),\n    actionTextSearch: () => dispatch(actions.textSearch(''))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MoviesList));","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx"],"names":["React","Component","axios","InfiniteScroll","connect","withRouter","MovieItems","actions","API_KEY","PATH_BASE","PATH_DISCOVER","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","MoviesList","state","movies","searchMovies","get","page","props","textSearch","then","response","setState","data","results","changeGenre","value","label","changeYears","changeOrdre","filterMovies","url","genre","years","ordre","actionTextSearch","componentDidMount","console","log","te","note","componentDidUpdate","prevProps","render","length","clicked","color","asyncPagination","hasMore","textAlign","mapStateToProps","filtres","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport { withRouter } from 'react-router-dom';\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\n\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from  './api';\n\nclass MoviesList extends Component {\n  state = {\n    movies: [],\n  };\n\n  componentDidMount () {\n    console.log('genre --->',this.props.genre);\n    console.log('texte --->',this.props.te);\n    if (this.props.textSearch !== null)\n      this.searchMovies();\n    else if(this.props.genre !== null|| this.props.years !== null|| this.props.note !== null)\n      this.filterMovies();\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log('sssssssssssss  ',this.props.textSearch)\n    if (prevProps.textSearch !== this.props.textSearch && this.props.textSearch !== '') \n     this.searchMovies();\n    else if (prevProps.genre !== this.props.genre || prevProps.years !== this.props.years || prevProps.note !== this.props.note || prevProps.ordre !== this.props.ordre)\n      this.filterMovies();\n  };\n\n  searchMovies = () => {\n      axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${this.props.textSearch}`)\n      .then(response => {\n        this.setState({movies : response.data.results}, () => {\n          this.props.changeGenre({ value: '', label: 'Genre' });\n          this.props.changeYears({ value: '', label: 'Annee' });\n          this.props.changeOrdre({ value: 'popularity.desc', label: 'PopularitÃ© desc' });\n        });\n      })\n  };\n\n  filterMovies = () => {\n    let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_ADULT}${PATH_LANGUE}fr`;\n      if (!!this.props.genre) \n        url += `&with_genres=${this.props.genre}`;\n      if (!!this.props.years)\n        url += `&primary_release_year=${this.props.years}`;\n      if (!!this.props.ordre)\n        url += `&sort_by=${this.props.ordre}`;\n\n      axios.get(url)\n      .then(response => {\n        this.setState({movies: response.data.results}, () => {\n        this.props.actionTextSearch();\n        })\n      })\n  }\n\n  \n\n  render() {\n    let movies = null;\n    if (this.state.movies !== null && this.state.movies.length > 0) \n      movies = <MovieItems movies={this.state.movies} clicked={() => this.clicked()}/>\n    if (this.state.movies.length === 0)\n      movies = <p style={{ color: \"white\" }}>Il y a 0 resultat pour: \"{this.props.textSearch}\".</p>\n    \n    let asyncPagination = null;\n\n    return (\n      <div className=\"block\">\n        <InfiniteScroll\n          dataLength={this.state.movies.length}\n          next={asyncPagination}\n          hasMore={this.state.hasMore}\n          loader={<h4>Loading...</h4>}\n          endMessage={<p style={{ textAlign: \"center\" }}><b>Yay! You have seen it all</b></p>}>\n          {movies}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    genre: state.filtres.genre.value,\n    years: state.filtres.years.value,\n    ordre: state.filtres.ordre.value,\n    textSearch: state.filtres.textSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    \n    changeGenre: (genre) => dispatch(actions.genre(genre)),\n    changeYears: (years) => dispatch(actions.years(years)),\n    changeOrdre: (ordre) => dispatch(actions.ordre(ordre)),\n    actionTextSearch: () => dispatch(actions.textSearch(''))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MoviesList));"]},"metadata":{},"sourceType":"module"}