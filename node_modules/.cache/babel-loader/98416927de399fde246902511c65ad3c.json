{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  token: null,\n  userId: null,\n  error: null,\n  loading: false,\n  errorServor: null,\n  registerSuccess: false\n};\n\nconst authStart = (state, action) => {\n  return updateObject(state, {\n    error: null,\n    loading: true\n  });\n};\n\nconst authSuccess = (state, action) => {\n  return updateObject(state, {\n    token: action.idToken,\n    userId: action.userId,\n    error: null,\n    loading: false\n  });\n};\n\nconst authFailed = (state, action) => {\n  return updateObject(state, {\n    error: action.error,\n    loading: false\n  });\n};\n\nconst authLogout = state => {\n  return updateObject(state, {\n    token: null,\n    userId: null\n  });\n};\n\nconst errorServor = (state, action) => {\n  return updateObject(state, {\n    errorServor: action.error\n  });\n};\n\nconst registerSuccess = (state, action) => {\n  return updateObject(state, {\n    registerSuccess: action.value\n  });\n};\n\nconst initRegisterSuccess = state => {\n  return updateObject(state, {\n    registerSuccess: false\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.AUTH_START:\n      return authStart(state, action);\n\n    case actionTypes.AUTH_SUCCESS:\n      return authSuccess(state, action);\n\n    case actionTypes.AUTH_FAILED:\n      return authFailed(state, action);\n\n    case actionTypes.AUTH_LOGOUT:\n      return authLogout(state);\n\n    case actionTypes.AUTH_ERROR:\n      return errorServor(state, action);\n\n    case actionTypes.REGISTER_SUCCESS:\n      return registerSuccess(state, action);\n\n    case actionTypes.INIT_REGISTER_SUCCESS:\n      return initRegisterSuccess(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/store/reducers/auth.js"],"names":["actionTypes","updateObject","initialState","token","userId","error","loading","errorServor","registerSuccess","authStart","state","action","authSuccess","idToken","authFailed","authLogout","value","initRegisterSuccess","reducer","type","AUTH_START","AUTH_SUCCESS","AUTH_FAILED","AUTH_LOGOUT","AUTH_ERROR","REGISTER_SUCCESS","INIT_REGISTER_SUCCESS"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n  token: null,\n  userId: null,\n  error: null,\n  loading: false,\n  errorServor: null,\n  registerSuccess: false\n};\n\nconst authStart = ( state, action ) => {\n  return updateObject( state, { error: null, loading: true } );\n};\n\nconst authSuccess = (state, action) => {\n  return updateObject( state, { \n      token: action.idToken,\n      userId: action.userId,\n      error: null,\n      loading: false\n   } );\n};\n\nconst authFailed = (state, action) => {\n  return updateObject( state, {\n      error: action.error,\n      loading: false\n  }); \n}\n\nconst authLogout = (state) => {\n  return updateObject(state, {\n      token: null,\n      userId: null\n  });\n};\n\nconst errorServor = (state, action) => {\n  return updateObject(state, {\n    errorServor: action.error\n  });\n};\n\nconst registerSuccess = (state, action) => {\n  return updateObject(state, {\n    registerSuccess: action.value\n  });\n};\n\nconst initRegisterSuccess = (state) => {\n  return updateObject(state, {\n    registerSuccess: false\n  });\n};\n\nconst reducer = ( state = initialState, action ) => {\n  switch ( action.type ) {\n      case actionTypes.AUTH_START: return authStart(state, action);\n      case actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\n      case actionTypes.AUTH_FAILED: return authFailed(state, action);\n      case actionTypes.AUTH_LOGOUT: return authLogout(state);\n      case actionTypes.AUTH_ERROR: return errorServor(state, action);\n      case actionTypes.REGISTER_SUCCESS: return registerSuccess(state, action);\n      case actionTypes.INIT_REGISTER_SUCCESS: return initRegisterSuccess(state);\n      \n      default: return state;\n  }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}