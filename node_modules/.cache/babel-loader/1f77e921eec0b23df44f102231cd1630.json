{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  movies: [],\n  page: 0,\n  nbPage: null,\n  textSearch: null,\n  next: null,\n  filtres: {\n    genre: {\n      value: null,\n      label: 'Genre'\n    },\n    years: {\n      value: null,\n      label: 'Annee'\n    },\n    sortby: {\n      value: null,\n      label: 'SortBy'\n    }\n  },\n  noResult: false\n};\n\nconst initialise = (state, action) => {\n  return updateObject(state, {\n    page: action.value,\n    movies: [],\n    nbPage: null\n  });\n};\n\nconst filtres = (state, action) => {\n  return updateObject(state, {\n    filtres: action.filtres\n  });\n};\n\nconst textSearch = (state, action) => {\n  return updateObject(state, {\n    textSearch: action.textSearch\n  });\n};\n\nconst movies = (state, action) => {\n  let a = [...state.movies, ...action.newMovies];\n  let movies = [...new Set(a.map(o => o.id))].map(id => a.find(i => i.id === id));\n  return updateObject(state, {\n    movies: movies,\n    nbPage: action.nbPage,\n    page: action.page,\n    next: action.next,\n    noResult: action.noResult\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.MOVIES:\n      return movies(state, action);\n\n    case actionTypes.FILTRES:\n      return filtres(state, action);\n\n    case actionTypes.TEXT_SEARCH:\n      return textSearch(state, action);\n\n    case actionTypes.INITIALISE:\n      return initialise(state, action);\n\n    case actionTypes.INITIALISE:\n      return initialise(state, action);\n\n    case actionTypes.INITIALISE:\n      return initialise(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/store/reducers/filtres.js"],"names":["actionTypes","updateObject","initialState","movies","page","nbPage","textSearch","next","filtres","genre","value","label","years","sortby","noResult","initialise","state","action","a","newMovies","Set","map","o","id","find","i","reducer","type","MOVIES","FILTRES","TEXT_SEARCH","INITIALISE"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n  movies: [],\n  page: 0,\n  nbPage: null,\n  textSearch: null,\n  next: null,\n  filtres: {\n    genre: {value: null, label: 'Genre'},\n    years: {value: null, label: 'Annee'},\n    sortby: {value: null, label: 'SortBy'}\n  },\n  noResult: false\n};\n\nconst initialise = (state, action) => {\n  return updateObject( state, { \n    page: action.value,\n    movies: [],\n    nbPage: null\n  })\n}\n\nconst filtres = (state, action) => {\n  return updateObject( state, { \n    filtres: action.filtres,\n  })\n}\n\nconst textSearch = (state, action) => {\n  return updateObject( state, { \n    textSearch: action.textSearch,\n  })\n}\n\nconst movies = (state, action) => {\n  let a = [...state.movies, ...action.newMovies];\n  let movies = [...new Set(a.map(o => o.id))].map(id => a.find(i => i.id === id))\n  return updateObject( state, { \n    movies: movies,\n    nbPage: action.nbPage,\n    page: action.page,\n    next: action.next,\n    noResult: action.noResult\n  });\n};\n\nconst reducer = ( state = initialState, action ) => {\n  switch ( action.type ) {\n    case actionTypes.MOVIES: return movies(state, action);\n    case actionTypes.FILTRES: return filtres(state, action);\n    case actionTypes.TEXT_SEARCH: return textSearch(state, action);\n    case actionTypes.INITIALISE: return initialise(state, action);\n    case actionTypes.INITIALISE: return initialise(state, action);\n    case actionTypes.INITIALISE: return initialise(state, action);\n    default: return state;\n  }\n}; \n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}