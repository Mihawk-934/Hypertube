{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from '../../containers/Home/MoviesList/api';\nexport const initialisePage = () => {\n  return {\n    type: actionTypes.INITIALISE_PAGE\n  };\n};\nexport const initialiseMovies = () => {\n  return {\n    type: actionTypes.INITIALISE_MOVIES\n  };\n};\nexport const filtres = filtres => {\n  return {\n    type: actionTypes.FILTRES,\n    filtres: filtres\n  };\n};\nexport const textSearch = textSearch => {\n  return {\n    type: actionTypes.TEXT_SEARCH,\n    textSearch: textSearch\n  };\n};\nexport const movies = (movies, nbPage, page, next) => {\n  return {\n    type: actionTypes.MOVIES,\n    newMovies: movies,\n    nbPage: nbPage,\n    page: page,\n    next: next\n  };\n};\nexport const popularRequest = page => {\n  return dispatch => {\n    axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${page}`).then(response => {\n      dispatch(movies(response.data.results, response.data.total_pages, page, 'popular'));\n    }).catch(err => console.log(err));\n  };\n};\nexport const filtresRequest = filtres => {\n  return dispatch => {\n    let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_ADULT}${PATH_LANGUE}fr`;\n    if (!!filtres.genre.value) url += `&with_genres=${filtres.genre.value}`;\n    if (!!filtres.years.value) url += `&primary_release_year=${filtres.years.value}`;\n    if (!!filtres.sortby.value) url += `&sort_by=${filtres.sortby.value}`;\n    axios.get(url).then(response => {\n      dispatch(movies(response.data.results));\n    }).catch(err => console.log(err));\n  };\n};\nexport const textSearchRequest = textSearch => {\n  return dispatch => {\n    axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`).then(response => {\n      dispatch(movies(response.data.results));\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/store/actions/filtres.js"],"names":["actionTypes","axios","API_KEY","PATH_BASE","PATH_DISCOVER","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","initialisePage","type","INITIALISE_PAGE","initialiseMovies","INITIALISE_MOVIES","filtres","FILTRES","textSearch","TEXT_SEARCH","movies","nbPage","page","next","MOVIES","newMovies","popularRequest","dispatch","get","then","response","data","results","total_pages","catch","err","console","log","filtresRequest","url","genre","value","years","sortby","textSearchRequest"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from  '../../containers/Home/MoviesList/api';\n\nexport const initialisePage = () => {\n    return {\n        type: actionTypes.INITIALISE_PAGE\n    }\n};\n\nexport const initialiseMovies = () => {\n    return {\n        type: actionTypes.INITIALISE_MOVIES\n    }\n};\n\nexport const filtres = (filtres) => {\n    return {\n        type: actionTypes.FILTRES,\n        filtres: filtres\n    }\n};\n\nexport const textSearch = (textSearch) => {\n    return {\n        type: actionTypes.TEXT_SEARCH,\n        textSearch: textSearch\n    }\n};\n\nexport const movies = (movies, nbPage, page, next) => {\n    return {\n        type: actionTypes.MOVIES,\n        newMovies: movies,\n        nbPage: nbPage,\n        page: page,\n        next: next\n    }\n};\n\nexport const popularRequest = (page) => {\n    return dispatch => {\n        axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${page}`)\n            .then(response => {\n                dispatch(movies(response.data.results, response.data.total_pages, page, 'popular'));\n            })\n            .catch(err => console.log(err));\n    }\n};\n\nexport const filtresRequest = (filtres) => {\n    return dispatch => {\n        let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_ADULT}${PATH_LANGUE}fr`;\n        if (!!filtres.genre.value)\n            url += `&with_genres=${filtres.genre.value}`;\n        if (!!filtres.years.value)\n            url += `&primary_release_year=${filtres.years.value}`;\n        if (!!filtres.sortby.value)\n            url += `&sort_by=${filtres.sortby.value}`;\n        axios.get(url)\n            .then(response => {\n                dispatch(movies(response.data.results));\n            })\n            .catch(err => console.log(err));\n    }\n};\n\nexport const textSearchRequest = (textSearch) => {\n    return dispatch => {\n        axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`)\n            .then(response => {\n                dispatch(movies(response.data.results));\n            })\n            .catch(err => console.log(err));\n    }\n};\n"]},"metadata":{},"sourceType":"module"}