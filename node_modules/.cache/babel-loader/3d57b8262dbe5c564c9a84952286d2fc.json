{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport { withRouter } from 'react-router-dom';\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from './api';\n\nclass MoviesList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      page: 1,\n      hasMore: true,\n      nbPage: 0\n    };\n\n    this.searchMovies = () => {\n      axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${this.props.textSearch}`).then(response => {\n        this.setMovies(response.data.results);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.newMovie();\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log('entrer dans [ComponentDidUpdate]');\n\n    if (prevProps.genre !== this.props.genre || prevProps.years !== this.props.years || prevProps.note !== this.props.note || prevProps.ordre !== this.props.ordre) {\n      console.log('[ComponentDidUpdate] if');\n      this.props.actionTextSearch();\n      this.setState({\n        page: 1,\n        nbPage: 0\n      }, () => this.newMovie());\n      return;\n    } else if (prevProps.textSearch !== this.props.textSearch) {\n      console.log('[ComponentDidUpdate] elseIf');\n      this.props.changeGenre({\n        value: '',\n        label: 'Genre'\n      });\n      this.props.changeYears({\n        value: '',\n        label: 'Annee'\n      });\n      this.props.changeOrdre({\n        value: 'popularity.desc',\n        label: 'PopularitÃ© desc'\n      });\n    }\n  }\n\n  // newMovie = async () => {\n  //   try {\n  //     if (this.state.nbPage !== 0 && this.state.page > this.state.nbPage) {\n  //       this.setState({ hasMore: false });\n  //       return;\n  //     }\n  //     let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_ADULT}${PATH_LANGUE}fr`;\n  //     if (!!this.props.genre) \n  //       url += `&with_genres=${this.props.genre}`;\n  //     if (!!this.props.years)\n  //       url += `&primary_release_year=${this.props.years}`;\n  //     if (!!this.props.ordre)\n  //       url += `&sort_by=${this.props.ordre}`;\n  //     let response = await axios.get(url);\n  //     this.setState({ nbPage: response.data.total_pages }, () => {\n  //       this.setMovies(response.data.results);\n  //     });\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n  // uniqueArray = a => {\n  //   return [...new Set(a.map(o => o.id))].map(id => a.find(i => i.id === id));\n  // };\n  // setMovies = movies => {\n  //   const oldMovies = this.state.page !== 1 ? this.state.movies : [];\n  //   const updateMovies = this.uniqueArray([...oldMovies, ...movies]);\n  //   this.setState(prevState => ({movies: updateMovies, page: prevState.page + 1}));\n  // };\n  render() {\n    let movies = null;\n    if (this.state.movies !== null && this.state.movies.length > 0) movies = /*#__PURE__*/React.createElement(MovieItems, {\n      movies: this.state.movies,\n      clicked: () => this.clicked(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }\n    });\n    if (this.state.movies.length === 0) movies = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 16\n      }\n    }, \"Il y a 0 resultat pour: \\\"\", this.props.textSearch, \"\\\".\");\n    let asyncPagination = null;\n    asyncPagination = this.newMovie;\n\n    if (!!this.props.textSearch) {\n      asyncPagination = this.searchMovies;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      dataLength: this.state.movies.length,\n      next: asyncPagination,\n      hasMore: this.state.hasMore,\n      loader: /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 19\n        }\n      }, \"Loading...\"),\n      endMessage: /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 58\n        }\n      }, \"Yay! You have seen it all\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, movies));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    genre: state.filtres.genre.value,\n    years: state.filtres.years.value,\n    ordre: state.filtres.ordre.value,\n    textSearch: state.filtres.textSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeGenre: genre => dispatch(actions.genre(genre)),\n    changeYears: years => dispatch(actions.years(years)),\n    changeOrdre: ordre => dispatch(actions.ordre(ordre)),\n    actionTextSearch: () => dispatch(actions.textSearch(null))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MoviesList));","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx"],"names":["React","Component","axios","InfiniteScroll","connect","withRouter","MovieItems","actions","API_KEY","PATH_BASE","PATH_DISCOVER","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","MoviesList","state","movies","page","hasMore","nbPage","searchMovies","get","props","textSearch","then","response","setMovies","data","results","componentDidMount","newMovie","componentDidUpdate","prevProps","console","log","genre","years","note","ordre","actionTextSearch","setState","changeGenre","value","label","changeYears","changeOrdre","render","length","clicked","color","asyncPagination","textAlign","mapStateToProps","filtres","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport { withRouter } from 'react-router-dom';\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\n\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from  './api';\n\nclass MoviesList extends Component {\n  state = {\n    movies: [],\n    page: 1,\n    hasMore: true,\n    nbPage: 0\n  };\n\n  componentDidMount() {\n    this.newMovie();\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log('entrer dans [ComponentDidUpdate]');\n    if (prevProps.genre !== this.props.genre || prevProps.years !== this.props.years || prevProps.note !== this.props.note || prevProps.ordre !== this.props.ordre) {\n      console.log('[ComponentDidUpdate] if');\n      this.props.actionTextSearch();\n      this.setState({page : 1, nbPage: 0}, () => this.newMovie());\n      return;\n    }\n\n    else if (prevProps.textSearch !== this.props.textSearch) {\n      console.log('[ComponentDidUpdate] elseIf')\n      this.props.changeGenre({ value: '', label: 'Genre' });\n      this.props.changeYears({ value: '', label: 'Annee' });\n      this.props.changeOrdre({ value: 'popularity.desc', label: 'PopularitÃ© desc' });\n    \n  \n    }\n  };\n\n  searchMovies = () => {\n      axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${this.props.textSearch}`)\n      .then(response => {\n        this.setMovies(response.data.results);\n      })\n  };\n\n  // newMovie = async () => {\n\n  //   try {\n  //     if (this.state.nbPage !== 0 && this.state.page > this.state.nbPage) {\n\n  //       this.setState({ hasMore: false });\n  //       return;\n  //     }\n\n  //     let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${this.state.page}${PATH_ADULT}${PATH_LANGUE}fr`;\n  //     if (!!this.props.genre) \n  //       url += `&with_genres=${this.props.genre}`;\n  //     if (!!this.props.years)\n  //       url += `&primary_release_year=${this.props.years}`;\n  //     if (!!this.props.ordre)\n  //       url += `&sort_by=${this.props.ordre}`;\n  //     let response = await axios.get(url);\n  //     this.setState({ nbPage: response.data.total_pages }, () => {\n  //       this.setMovies(response.data.results);\n\n  //     });\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n  // uniqueArray = a => {\n  //   return [...new Set(a.map(o => o.id))].map(id => a.find(i => i.id === id));\n  // };\n\n  // setMovies = movies => {\n\n  //   const oldMovies = this.state.page !== 1 ? this.state.movies : [];\n  //   const updateMovies = this.uniqueArray([...oldMovies, ...movies]);\n  //   this.setState(prevState => ({movies: updateMovies, page: prevState.page + 1}));\n  // };\n\n  render() {\n    let movies = null;\n    if (this.state.movies !== null && this.state.movies.length > 0) \n      movies = <MovieItems movies={this.state.movies} clicked={() => this.clicked()}/>\n    if (this.state.movies.length === 0)\n      movies = <p style={{ color: \"white\" }}>Il y a 0 resultat pour: \"{this.props.textSearch}\".</p>\n    \n    let asyncPagination = null;\n  \n    asyncPagination = this.newMovie;\n \n    if (!!this.props.textSearch)  {\n      asyncPagination = this.searchMovies;\n    }\n \n\n    return (\n      <div className=\"block\">\n        <InfiniteScroll\n          dataLength={this.state.movies.length}\n          next={asyncPagination}\n          hasMore={this.state.hasMore}\n          loader={<h4>Loading...</h4>}\n          endMessage={<p style={{ textAlign: \"center\" }}><b>Yay! You have seen it all</b></p>}>\n          {movies}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    genre: state.filtres.genre.value,\n    years: state.filtres.years.value,\n    ordre: state.filtres.ordre.value,\n    textSearch: state.filtres.textSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    \n    changeGenre: (genre) => dispatch(actions.genre(genre)),\n    changeYears: (years) => dispatch(actions.years(years)),\n    changeOrdre: (ordre) => dispatch(actions.ordre(ordre)),\n    actionTextSearch: () => dispatch(actions.textSearch(null))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MoviesList));"]},"metadata":{},"sourceType":"module"}