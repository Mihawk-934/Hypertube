{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Auth/Login/AuthPhone/AuthPhone.jsx\";\nimport React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\nimport firebase from '../../../../fire';\nimport * as regex from './RegexPhone';\nimport { withRouter } from 'react-router-dom';\nimport * as actions from '../../../../store/actions/index';\nimport { connect } from 'react-redux';\nimport MyInput from '../../../../components/MyInput/MyInput';\nimport MyButton from '../../../../components/MyButton/MyButton';\nimport '../../auth.css';\nimport { checkInput } from '../../../../components/utility/utility';\n\nclass Phone extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      phone: null,\n      codeVerification: null,\n      errors: {},\n      errorCatch: '',\n      disable: true,\n      show: false,\n      codeError: null\n    };\n\n    this.handleInput = (e, min, max) => {\n      const Id = e.target.id;\n      const values = { ...this.state.values\n      };\n      values[Id] = e.target.value;\n      this.setState({\n        values: values\n      }, () => {\n        let error = null;\n        error = checkInput(Id, values[Id], min, max);\n        const errors = { ...this.state.errors\n        };\n        errors[Id] = error;\n        this.setState({\n          errors: errors\n        }, () => {\n          let number;\n          e.target.id === 'phone' ? number === 1 : number === 2;\n          Object.values(this.state.errors).join('').length === 0 && Object.keys(this.state.errors).length === number ? this.setState({\n            disabled: false\n          }) : this.setState({\n            disabled: true\n          });\n        });\n      }); // const nameInput = event.target.id;\n      // const valueInput = event.target.value;\n      // this.setState({[event.target.id]:event.target.value},\n      //     () => {this.handleInputValid(nameInput,valueInput)    \n      // });\n    };\n\n    this.sendCode = e => {\n      e.preventDefault();\n      firebase.auth().languageCode = 'fr';\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\"recaptcha-container\", {\n        size: \"invisible\"\n      });\n      let phoneNumber = this.state.phone;\n      let appVerifier = window.recaptchaVerifier;\n      firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier).then(confirmationResult => {\n        this.setState({\n          show: true,\n          disable: true\n        }, () => {\n          window.confirmationResult = confirmationResult;\n        });\n      }).catch(error => {\n        this.setState({\n          errorCatch: error.message\n        });\n      });\n    };\n\n    this.receiveCode = e => {\n      e.preventDefault();\n      const verificationId = this.state.codeVerification;\n      window.confirmationResult.confirm(verificationId).then(result => {\n        localStorage.setItem('id', result.user.uid);\n        localStorage.setItem('token', result.user.ma);\n        localStorage.setItem('show', true);\n        this.props.onPhone(result.user.ma, result.user.uid);\n        this.props.history.push('/home');\n      }).catch(error => {\n        this.setState({\n          codeError: 'Error'\n        });\n      });\n    };\n  }\n\n  render() {\n    let msgCatch;\n    if (this.state.errorCatch && this.state.codeError === null) msgCatch = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 24\n      }\n    }, \"Trop d'essai votre compte a \\xE9t\\xE9 temporairement suspendu. Reesayer plus tard\");\n    if (this.state.codeError) msgCatch = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 24\n      }\n    }, \"le code ne coresspond pas a celui qui vous a \\xE9t\\xE9 envoyer veuillez ressayer\");\n    return (\n      /*#__PURE__*/\n      //IL FAUT ENLEVER LE NUMERO DE TELEPHONE DANS LE INPUT QUAND ON VALIDE LA PREMIERE FOIS.\n      React.createElement(Form, {\n        className: \"login-form eiga-form\",\n        onSubmit: this.onSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-form-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, msgCatch, /*#__PURE__*/React.createElement(MyInput, {\n        label: this.state.show === false ? \"Connexion via Smarthpone\" : \"Entrer Votre Code\",\n        id: this.state.show === false ? \"phone\" : \"codeVerification\",\n        type: \"tel\",\n        placeholder: this.state.show === false ? \"ex:+33610122325\" : \"Tapez le code de verification\",\n        error: this.state.show === false ? this.state.error.phone : this.state.error.codeVerification,\n        changed: e => this.handleInput(e, 12, 12),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }\n      }, \" \", this.state.show === false ? 'Entrer votre numero de mobile pour recevoir un code par SMS' : 'Entrer le code reÃ§u par SMS'), /*#__PURE__*/React.createElement(MyButton, {\n        id: \"recaptcha-container\",\n        disabled: this.state.disable,\n        clicked: this.state.show === false ? this.sendCode : this.receiveCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }\n      })))\n    );\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onPhone: (token, userId) => dispatch(actions.authSuccess(token, userId))\n  };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(Phone));","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Auth/Login/AuthPhone/AuthPhone.jsx"],"names":["React","Component","Form","firebase","regex","withRouter","actions","connect","MyInput","MyButton","checkInput","Phone","state","phone","codeVerification","errors","errorCatch","disable","show","codeError","handleInput","e","min","max","Id","target","id","values","value","setState","error","number","Object","join","length","keys","disabled","sendCode","preventDefault","auth","languageCode","window","recaptchaVerifier","RecaptchaVerifier","size","phoneNumber","appVerifier","signInWithPhoneNumber","then","confirmationResult","catch","message","receiveCode","verificationId","confirm","result","localStorage","setItem","user","uid","ma","props","onPhone","history","push","render","msgCatch","onSubmit","mapDispatchToProps","dispatch","token","userId","authSuccess"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Form } from 'react-bootstrap'\nimport firebase from '../../../../fire';\nimport * as regex from './RegexPhone'\nimport { withRouter } from 'react-router-dom';\nimport * as actions from '../../../../store/actions/index';\nimport { connect } from 'react-redux';\nimport MyInput from '../../../../components/MyInput/MyInput';\nimport MyButton from '../../../../components/MyButton/MyButton';\nimport '../../auth.css';\nimport { checkInput } from '../../../../components/utility/utility';\n\nclass Phone extends Component {\n    state = {\n        phone:null,\n        codeVerification:null,\n        errors:{},\n        errorCatch:'',\n        disable: true,\n        show: false,\n        codeError:null\n    }\n\n    //// REVOIR LA PARTIEEEE HANDLER ET LES 3 METHODE POUR EN FAIRE QU'UNE COMME POUR REGISTER\n    // handleFormValid = (name_input) => { \n    //     let number = null;\n    //     let store = ''; \n    //     name_input === 'phone' ? number = 1 : number = 2;\n    //     const error = {...this.state.error};\n    //     const values = Object.values(error);\n\n    //     for (const key of values)\n    //         store += key;\n    //     Object.keys(error).length === number && store.length === 0 ? \n    //     this.setState({disable:false}) : this.setState({disable:true});\n    // }\n\n    // handleInputValid = (name_input,value_input) => {\n    //     let error = {...this.state.error};\n\n    //     //FAIRE REGEX COMME POUR REGISTER ET LE RESTE.\n\n    //     // error[name_input] = checkInput(name_input, value_input);\n\n\n    //     switch(name_input){\n    //         case 'phone': value_input.match(regex.phoneNumber) ? error[name_input]='' : error[name_input] = \"* Format: +33610122334\";\n    //             break;\n    //         case 'codeVerification':value_input.match(regex.codeVerification) && value_input.length === 6 ? error[name_input]='' : error[name_input] = \"* Code incorrect ex: 123456\";\n    //              break;\n    //         default:\n    //             console.log(\"NUMBER NOT FOUND\");\n    //     }\n    //     this.setState({ error : error }, () => {this.handleFormValid(name_input)});\n    // }\n\n    handleInput = (e, min, max) => {\n        const Id = e.target.id;\n        const values = {...this.state.values};\n        values[Id] = e.target.value;\n        this.setState({ values : values }, () => {\n            let error = null;\n            error = checkInput(Id, values[Id], min, max);\n            const errors = {...this.state.errors};\n            errors[Id]= error;\n            this.setState({ errors: errors }, () => {\n                let number;\n                e.target.id === 'phone' ? number === 1 : number === 2;\n                Object.values(this.state.errors).join('').length === 0 && Object.keys(this.state.errors).length === number ? \n                this.setState({ disabled: false }) : this.setState({ disabled: true });\n            })\n        });\n\n        // const nameInput = event.target.id;\n        // const valueInput = event.target.value;\n        // this.setState({[event.target.id]:event.target.value},\n        //     () => {this.handleInputValid(nameInput,valueInput)    \n        // });\n    }\n\n    // changedHandler = (e, min, max) => {\n    //     const Id = e.target.id;\n    //     const values = {...this.state.values};\n    //     values[Id] = e.target.value;\n    //     this.setState({values : values}, () => {\n    //       let error = null;\n    //       error = checkInput(Id, values[Id], min, max);\n    //       const errors = {...this.state.errors};\n    //       errors[Id] = error;\n    //       this.setState({errors: errors}, () => { \n    //         Object.values(this.state.errors).join('').length === 0 && Object.keys(this.state.errors).length === 2 ? \n    //         this.setState({ disabled: false }) : this.setState({ disabled: true });\n    //       })\n    //     });\n    //   };\n\n    sendCode = (e) => {  \n        e.preventDefault();\n        firebase.auth().languageCode = 'fr';\n        window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\"recaptcha-container\",\n        {\n           size:\"invisible\"\n        });\n        let phoneNumber = this.state.phone;\n        let appVerifier = window.recaptchaVerifier;\n        firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier)\n        .then(confirmationResult => { \n            this.setState({ show: true, disable : true }, () => {\n                window.confirmationResult = confirmationResult;\n            })\n        })\n        .catch(error => {\n            this.setState({errorCatch:error.message})\n        });\n    }\n        \n    receiveCode= (e) => {\n        e.preventDefault();\n        const verificationId = this.state.codeVerification;\n        window.confirmationResult\n        .confirm(verificationId)\n        .then(result => {\n            localStorage.setItem('id',result.user.uid)\n            localStorage.setItem('token', result.user.ma)\n            localStorage.setItem('show', true)\n            this.props.onPhone(result.user.ma,result.user.uid);\n            this.props.history.push('/home')\n        })\n        .catch(error => {\n            this.setState({codeError:'Error'});\n        });\n    }\n\n    render() {\n        let msgCatch;\n\n        if (this.state.errorCatch && this.state.codeError === null)\n            msgCatch = <p>Trop d'essai votre compte a Ã©tÃ© temporairement suspendu. Reesayer plus tard</p>;\n        \n        if (this.state.codeError)\n            msgCatch = <p>le code ne coresspond pas a celui qui vous a Ã©tÃ© envoyer veuillez ressayer</p>;\n        \n        return (\n            //IL FAUT ENLEVER LE NUMERO DE TELEPHONE DANS LE INPUT QUAND ON VALIDE LA PREMIERE FOIS.\n            <Form className=\"login-form eiga-form\" onSubmit={this.onSubmit}>\n                <div className=\"login-form-content\">\n                    {msgCatch}\n                    <MyInput \n                        label={this.state.show === false ? \"Connexion via Smarthpone\" : \"Entrer Votre Code\"} \n                        id={this.state.show === false ? \"phone\": \"codeVerification\" }\n                        type=\"tel\"\n                        placeholder={this.state.show === false ? \"ex:+33610122325\" : \"Tapez le code de verification\"}\n                        error={this.state.show === false ? this.state.error.phone : this.state.error.codeVerification} \n                        changed={(e) => this.handleInput(e, 12, 12)}/>\n                    <p> {this.state.show === false ? \n                        'Entrer votre numero de mobile pour recevoir un code par SMS' : \n                        'Entrer le code reÃ§u par SMS'}\n                    </p>\n                    <MyButton id=\"recaptcha-container\" disabled={this.state.disable} clicked={this.state.show === false ? this.sendCode : this.receiveCode}/>\n                </div>\n            </Form>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onPhone: (token, userId) => dispatch(actions.authSuccess(token, userId))\n    };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps) (Phone));\n"]},"metadata":{},"sourceType":"module"}