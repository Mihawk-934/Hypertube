{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  cart: [// {\n    //     title: 'FILM 1',\n    //     price: 1000,\n    //     id: 1,\n    //     qte : 1\n    // },\n    // {\n    //     title: 'FILM 2',\n    //     price: 2000,\n    //     id: 2,\n    //     qte: 1\n    // },\n    // {\n    //     title: 'FILM 3',\n    //     price: 3000,\n    //     id: 3,\n    //     qte: 1\n    // },\n    // {\n    //     title: 'FILM 4',\n    //     price: 4000,\n    //     id: 4,\n    //     qte: 1\n    // },\n  ],\n  total: 0,\n  qte: 0\n};\n\nconst addToCart = (state, action) => {\n  let tab = [...state.cart];\n  let value = {\n    title: action.movie.title,\n    price: 1000,\n    id: action.movie.id,\n    qte: 1,\n    img: action.movie.poster_path\n  };\n  console.log(value);\n  console.log(tab);\n  tab.push(value);\n  return updateObject(state, {\n    cart: tab\n  });\n};\n\nconst removeToCart = (state, action) => {\n  return updateObject(state, {\n    cart: state.cart.filter(cartItem => cartItem.id !== action.id)\n  });\n};\n\nconst resetCart = state => {\n  return updateObject(state, {\n    cart: []\n  });\n};\n\nconst increase = (state, action) => {\n  let tempCart = state.cart.map(cartItem => {\n    if (cartItem.id === action.id) cartItem = { ...cartItem,\n      qte: cartItem.qte + 1\n    };\n    return cartItem;\n  });\n  return { ...state,\n    cart: tempCart\n  };\n};\n\nconst decrease = (state, action) => {\n  let tempCart = state.cart.map(cartItem => {\n    if (cartItem.id === action.id) cartItem = { ...cartItem,\n      qte: cartItem.qte - 1\n    };\n    return cartItem;\n  });\n  return { ...state,\n    cart: tempCart\n  };\n};\n\nconst getTotals = state => {\n  let {\n    total,\n    qte\n  } = state.cart.reduce((cartTotal, cartItem) => {\n    const itemTotal = cartItem.price * cartItem.qte;\n    cartTotal.total += itemTotal;\n    cartTotal.qte += cartItem.qte;\n    return cartTotal;\n  }, {\n    total: 0,\n    qte: 0\n  });\n  total = parseFloat(total.toFixed(2));\n  return { ...state,\n    total,\n    qte\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      return addToCart(state, action);\n\n    case actionTypes.REMOVE_TO_CART:\n      return removeToCart(state, action);\n\n    case actionTypes.RESET_CART:\n      return resetCart(state, action);\n\n    case actionTypes.INCREASE:\n      return increase(state, action);\n\n    case actionTypes.DECREASE:\n      return decrease(state, action);\n\n    case actionTypes.GET_TOTAL:\n      return getTotals(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/miclaude/Desktop/Netflix/src/store/reducers/cart.js"],"names":["actionTypes","updateObject","initialState","cart","total","qte","addToCart","state","action","tab","value","title","movie","price","id","img","poster_path","console","log","push","removeToCart","filter","cartItem","resetCart","increase","tempCart","map","decrease","getTotals","reduce","cartTotal","itemTotal","parseFloat","toFixed","reducer","type","ADD_TO_CART","REMOVE_TO_CART","RESET_CART","INCREASE","DECREASE","GET_TOTAL"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    cart: [\n        // {\n        //     title: 'FILM 1',\n        //     price: 1000,\n        //     id: 1,\n        //     qte : 1\n        // },\n        // {\n        //     title: 'FILM 2',\n        //     price: 2000,\n        //     id: 2,\n        //     qte: 1\n        // },\n        // {\n        //     title: 'FILM 3',\n        //     price: 3000,\n        //     id: 3,\n        //     qte: 1\n        // },\n        // {\n        //     title: 'FILM 4',\n        //     price: 4000,\n        //     id: 4,\n        //     qte: 1\n        // },\n    ],\n    total: 0,\n    qte: 0\n};\n\nconst addToCart = (state, action) => {\n    let tab = [...state.cart];\n    let value = {\n        title: action.movie.title,\n        price: 1000,\n        id: action.movie.id,\n        qte: 1,\n        img: action.movie.poster_path\n    }\n    console.log(value);\n    console.log(tab)\n    tab.push(value)\n    return updateObject( state, { cart: tab })\n}\n\nconst removeToCart = (state, action) => {\n    return updateObject( state, { \n        cart: state.cart.filter((cartItem) => cartItem.id !== action.id)\n    })\n}\n\nconst resetCart = (state ) => {\n    return updateObject( state, { \n      cart: []\n    })\n}\n\nconst increase = (state, action) => {\n    let tempCart = state.cart.map(cartItem => {\n        if (cartItem.id === action.id)\n            cartItem = { ...cartItem, qte: cartItem.qte + 1 };\n        return cartItem;\n    })\n    return { ...state, cart: tempCart }\n}\n\nconst decrease = (state, action) => {\n    let tempCart = state.cart.map(cartItem => {\n        if (cartItem.id === action.id)\n            cartItem = { ...cartItem, qte: cartItem.qte - 1 };\n        return cartItem;\n    })\n    return { ...state, cart: tempCart }\n}\n\nconst getTotals = (state) => {\n    let { total, qte } = state.cart.reduce(\n        (cartTotal, cartItem) => {\n            const itemTotal = cartItem.price * cartItem.qte;\n            cartTotal.total += itemTotal;\n            cartTotal.qte += cartItem.qte;\n            return cartTotal;\n        },\n        {\n            total: 0,\n            qte: 0\n        }\n    );\n    total = parseFloat(total.toFixed(2));\n    return {...state, total, qte}\n}\n\nconst reducer = ( state = initialState, action ) => {\n  switch ( action.type ) {\n    case actionTypes.ADD_TO_CART: return addToCart(state, action);\n    case actionTypes.REMOVE_TO_CART: return removeToCart(state, action);\n    case actionTypes.RESET_CART: return resetCart(state, action);\n    case actionTypes.INCREASE: return increase(state, action);\n    case actionTypes.DECREASE: return decrease(state, action);\n    case actionTypes.GET_TOTAL: return getTotals(state);\n    default: return state;\n  }\n}; \n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}