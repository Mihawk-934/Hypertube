{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/tdd_project/src/components/MyInput/MyInput.jsx\";\nimport React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst Input = props => /*#__PURE__*/React.createElement(Form.Group, {\n  controlId: props.controlId,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }\n}, props.label && /*#__PURE__*/React.createElement(Form.Label, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 23\n  }\n}, props.label), props.type && props.label && props.changed && /*#__PURE__*/React.createElement(Form.Control, {\n  type: props.type,\n  placeholder: props.label,\n  size: \"m\",\n  onChange: props.changed,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 53\n  }\n}), props.error && /*#__PURE__*/React.createElement(Form.Text, {\n  className: \"text-muted\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 23\n  }\n}, props.error));\n\nexport default Input;\ndescribe('Renders', () => {\n  let wrapper;\n  let mockFunc;\n  beforeEach(() => {\n    mockFunc = jest.fn(); //on creer des props pour notre composant\n\n    const props = {\n      buttonText: 'Example Button Test',\n      emitEvent: mockFunc\n    };\n    wrapper = shallow( /*#__PURE__*/React.createElement(SharedButton, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }\n    })));\n  });\n  it('Should Render a button', () => {\n    const button = findByTestAtrr(wrapper, 'buttonComponent');\n    expect(button.length).toBe(1);\n  });\n  it('Should emit callback on click event', () => {\n    const button = findByTestAtrr(wrapper, 'buttonComponent');\n    button.simulate('click');\n    const callback = mockFunc.mock.calls.length;\n    expect(callback).toBe(1);\n  });\n});","map":{"version":3,"sources":["/Users/miclaude/Desktop/tdd_project/src/components/MyInput/MyInput.jsx"],"names":["React","Form","Input","props","controlId","label","type","changed","error","describe","wrapper","mockFunc","beforeEach","jest","fn","buttonText","emitEvent","shallow","it","button","findByTestAtrr","expect","length","toBe","simulate","callback","mock","calls"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAGA,MAAMC,KAAK,GAAGC,KAAK,iBACf,oBAAC,IAAD,CAAM,KAAN;AAAY,EAAA,SAAS,EAAEA,KAAK,CAACC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGD,KAAK,CAACE,KAAN,iBAAe,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAaF,KAAK,CAACE,KAAnB,CADlB,EAEGF,KAAK,CAACG,IAAN,IAAcH,KAAK,CAACE,KAApB,IAA6BF,KAAK,CAACI,OAAnC,iBAA6C,oBAAC,IAAD,CAAM,OAAN;AAC5C,EAAA,IAAI,EAAEJ,KAAK,CAACG,IADgC;AAE5C,EAAA,WAAW,EAAEH,KAAK,CAACE,KAFyB;AAG5C,EAAA,IAAI,EAAC,GAHuC;AAI5C,EAAA,QAAQ,EAAEF,KAAK,CAACI,OAJ4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFhD,EAQGJ,KAAK,CAACK,KAAN,iBAAe,oBAAC,IAAD,CAAM,IAAN;AAAW,EAAA,SAAS,EAAC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAmCL,KAAK,CAACK,KAAzC,CARlB,CADJ;;AAcA,eAAeN,KAAf;AAGAO,QAAQ,CAAC,SAAD,EAAY,MAAM;AAExB,MAAIC,OAAJ;AACA,MAAIC,QAAJ;AACAC,EAAAA,UAAU,CAAC,MAAK;AACZD,IAAAA,QAAQ,GAAGE,IAAI,CAACC,EAAL,EAAX,CADY,CAEZ;;AACA,UAAMX,KAAK,GAAG;AACVY,MAAAA,UAAU,EAAE,qBADF;AAEVC,MAAAA,SAAS,EAAEL;AAFD,KAAd;AAIAD,IAAAA,OAAO,GAAGO,OAAO,eAAC,oBAAC,YAAD,oBAAkBd,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD,CAAjB;AACH,GARS,CAAV;AAUAe,EAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AAC/B,UAAMC,MAAM,GAAGC,cAAc,CAACV,OAAD,EAAU,iBAAV,CAA7B;AACAW,IAAAA,MAAM,CAACF,MAAM,CAACG,MAAR,CAAN,CAAsBC,IAAtB,CAA2B,CAA3B;AACH,GAHC,CAAF;AAKAL,EAAAA,EAAE,CAAC,qCAAD,EAAwC,MAAM;AAC5C,UAAMC,MAAM,GAAGC,cAAc,CAACV,OAAD,EAAU,iBAAV,CAA7B;AACAS,IAAAA,MAAM,CAACK,QAAP,CAAgB,OAAhB;AACA,UAAMC,QAAQ,GAAGd,QAAQ,CAACe,IAAT,CAAcC,KAAd,CAAoBL,MAArC;AACAD,IAAAA,MAAM,CAACI,QAAD,CAAN,CAAiBF,IAAjB,CAAsB,CAAtB;AACH,GALC,CAAF;AAMD,CAzBO,CAAR","sourcesContent":["import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\n\nconst Input = props => (\n    <Form.Group controlId={props.controlId}>\n      {props.label && <Form.Label>{props.label}</Form.Label>}\n      {props.type && props.label && props.changed &&<Form.Control\n        type={props.type}\n        placeholder={props.label}\n        size=\"m\"\n        onChange={props.changed}\n      />}\n      {props.error && <Form.Text className=\"text-muted\">{props.error}</Form.Text>}\n    </Form.Group>\n);\n\n\nexport default Input;\n\n\ndescribe('Renders', () => {\n\n  let wrapper; \n  let mockFunc;\n  beforeEach(()=> {\n      mockFunc = jest.fn();\n      //on creer des props pour notre composant\n      const props = {\n          buttonText: 'Example Button Test',\n          emitEvent: mockFunc\n      };\n      wrapper = shallow(<SharedButton {...props}/>);\n  });\n\n  it('Should Render a button', () => {\n      const button = findByTestAtrr(wrapper, 'buttonComponent');\n      expect(button.length).toBe(1);\n  });\n\n  it('Should emit callback on click event', () => {\n      const button = findByTestAtrr(wrapper, 'buttonComponent');\n      button.simulate('click');\n      const callback = mockFunc.mock.calls.length;\n      expect(callback).toBe(1);\n  });\n});"]},"metadata":{},"sourceType":"module"}