{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  cart: [{\n    title: 'FILM 1',\n    price: 1000,\n    id: 1,\n    qte: 1\n  }, {\n    title: 'FILM 2',\n    price: 2000,\n    id: 2,\n    qte: 1\n  }, {\n    title: 'FILM 3',\n    price: 3000,\n    id: 3,\n    qte: 1\n  }, {\n    title: 'FILM 4',\n    price: 4000,\n    id: 4,\n    qte: 1\n  }],\n  total: 0,\n  qte: 0\n};\n\nconst addToCart = (state, action) => {\n  return updateObject(state, {\n    count: state.count + 1\n  });\n};\n\nconst removeToCart = (state, action) => {\n  return updateObject(state, {\n    cart: state.cart.filter(cartItem => cartItem.id !== action.id)\n  });\n};\n\nconst resetCart = (state, action) => {\n  // <=> return{ ...state, cart: [] }.\n  return updateObject(state, {\n    cart: []\n  });\n};\n\nconst increase = (state, action) => {\n  let tempCart = state.cart(cartItem => {\n    if (cartItem.id === action.id) cartItem = { ...cartItem,\n      qte: cartItem.qte + 1\n    };\n  });\n  return { ...state,\n    cart: tempCart\n  };\n};\n\nconst decrease = (state, action) => {\n  let tempCart = state.cart(cartItem => {\n    if (cartItem.id === action.id) cartItem = { ...cartItem,\n      qte: cartItem.qte + 1\n    };\n  });\n  return { ...state,\n    cart: tempCart\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      return addToCart(state, action);\n\n    case actionTypes.REMOVE_TO_CART:\n      return removeToCart(state, action);\n\n    case actionTypes.RESET_CART:\n      return resetCart(state, action);\n\n    case actionTypes.INCREASE:\n      return increase(state, action);\n\n    case actionTypes.DECREASE:\n      return decrease(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/miclaude/Desktop/Netflix/src/store/reducers/cart.js"],"names":["actionTypes","updateObject","initialState","cart","title","price","id","qte","total","addToCart","state","action","count","removeToCart","filter","cartItem","resetCart","increase","tempCart","decrease","reducer","type","ADD_TO_CART","REMOVE_TO_CART","RESET_CART","INCREASE","DECREASE"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    cart: [\n        {\n            title: 'FILM 1',\n            price: 1000,\n            id: 1,\n            qte : 1\n        },\n        {\n            title: 'FILM 2',\n            price: 2000,\n            id: 2,\n            qte: 1\n        },\n        {\n            title: 'FILM 3',\n            price: 3000,\n            id: 3,\n            qte: 1\n        },\n        {\n            title: 'FILM 4',\n            price: 4000,\n            id: 4,\n            qte: 1\n        },\n    ],\n    total: 0,\n    qte: 0\n};\n\nconst addToCart = (state, action) => {\n  return updateObject( state, { \n    count: state.count + 1\n  })\n}\n\nconst removeToCart = (state, action) => {\n    return updateObject( state, { \n        cart: state.cart.filter((cartItem) => cartItem.id !== action.id)\n    })\n}\n\nconst resetCart = (state, action) => {\n    // <=> return{ ...state, cart: [] }.\n    return updateObject( state, { \n      cart: []\n    })\n}\n\nconst increase = (state, action) => {\n    let tempCart = state.cart(cartItem => {\n        if (cartItem.id === action.id)\n            cartItem= { ...cartItem, qte: cartItem.qte + 1}\n    })\n    return {\n        ...state, cart: tempCart\n    }\n}\n\nconst decrease = (state, action) => {\n    let tempCart = state.cart(cartItem => {\n        if (cartItem.id === action.id)\n            cartItem= { ...cartItem, qte: cartItem.qte + 1}\n    })\n    return {\n        ...state, cart: tempCart\n    }\n}\n\n\n\nconst reducer = ( state = initialState, action ) => {\n  switch ( action.type ) {\n    case actionTypes.ADD_TO_CART: return addToCart(state, action);\n    case actionTypes.REMOVE_TO_CART: return removeToCart(state, action);\n    case actionTypes.RESET_CART: return resetCart(state, action);\n    case actionTypes.INCREASE: return increase(state, action);\n    case actionTypes.DECREASE: return decrease(state, action);\n    default: return state;\n  }\n}; \n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}