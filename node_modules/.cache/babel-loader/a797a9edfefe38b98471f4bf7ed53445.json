{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  cart: [],\n  total: 0,\n  qte: 0\n};\n\nconst addToCart = (state, action) => {\n  let noSimilarFilm = true;\n  let tempCart = state.cart.map(cartItem => {\n    if (cartItem.id === action.movie.id) {\n      cartItem = { ...cartItem,\n        qte: cartItem.qte + 1\n      };\n      noSimilarFilm = false;\n    }\n\n    return cartItem;\n  });\n\n  if (noSimilarFilm) {\n    tempCart = [...state.cart];\n    let value = {\n      title: action.movie.title,\n      price: 9.99,\n      id: action.movie.id,\n      qte: 1,\n      img: action.movie.poster_path,\n      duree: action.movie.runtime,\n      note: action.movie.vote_average\n    };\n    tempCart.push(value);\n  }\n\n  return { ...state,\n    cart: tempCart\n  };\n};\n\nconst removeToCart = (state, action) => {\n  return updateObject(state, {\n    cart: state.cart.filter(cartItem => cartItem.id !== action.id)\n  });\n};\n\nconst resetCart = state => {\n  return updateObject(state, {\n    cart: []\n  });\n};\n\nconst increase = (state, action) => {\n  let tempCart = state.cart.map(cartItem => {\n    if (cartItem.id === action.id) cartItem = { ...cartItem,\n      qte: cartItem.qte + 1\n    };\n    return cartItem;\n  });\n  return { ...state,\n    cart: tempCart\n  };\n};\n\nconst decrease = (state, action) => {\n  let tempCart = state.cart.map(cartItem => {\n    if (cartItem.id === action.id) cartItem = { ...cartItem,\n      qte: cartItem.qte - 1\n    };\n    return cartItem;\n  });\n  return { ...state,\n    cart: tempCart\n  };\n};\n\nconst getTotals = state => {\n  let {\n    total,\n    qte\n  } = state.cart.reduce((cartTotal, cartItem) => {\n    const itemTotal = cartItem.price * cartItem.qte;\n    cartTotal.total += itemTotal;\n    cartTotal.qte += cartItem.qte;\n    return cartTotal;\n  }, {\n    total: 0,\n    qte: 0\n  });\n  total = parseFloat(total.toFixed(2));\n  return { ...state,\n    total,\n    qte\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      return addToCart(state, action);\n\n    case actionTypes.REMOVE_TO_CART:\n      return removeToCart(state, action);\n\n    case actionTypes.RESET_CART:\n      return resetCart(state, action);\n\n    case actionTypes.INCREASE:\n      return increase(state, action);\n\n    case actionTypes.DECREASE:\n      return decrease(state, action);\n\n    case actionTypes.GET_TOTAL:\n      return getTotals(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Volumes/MICHAEL/Netflix/src/store/reducers/cart.js"],"names":["actionTypes","updateObject","initialState","cart","total","qte","addToCart","state","action","noSimilarFilm","tempCart","map","cartItem","id","movie","value","title","price","img","poster_path","duree","runtime","note","vote_average","push","removeToCart","filter","resetCart","increase","decrease","getTotals","reduce","cartTotal","itemTotal","parseFloat","toFixed","reducer","type","ADD_TO_CART","REMOVE_TO_CART","RESET_CART","INCREASE","DECREASE","GET_TOTAL"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    cart: [],\n    total: 0,\n    qte: 0\n};\n\nconst addToCart = (state, action) => {\n    let noSimilarFilm = true;\n\n    let tempCart = state.cart.map(cartItem => {\n        if (cartItem.id === action.movie.id) {\n            cartItem = { ...cartItem, qte: cartItem.qte + 1 };\n            noSimilarFilm = false\n        }    \n        return cartItem;\n    })\n    if (noSimilarFilm) {\n        tempCart = [...state.cart];\n        let value = {\n            title: action.movie.title,\n            price: 9.99,\n            id: action.movie.id,\n            qte: 1,\n            img: action.movie.poster_path,\n            duree: action.movie.runtime,\n            note: action.movie.vote_average\n        }\n        tempCart.push(value)\n    }\n    return { ...state, cart: tempCart }\n}\n\nconst removeToCart = (state, action) => {\n    return updateObject( state, { \n        cart: state.cart.filter((cartItem) => cartItem.id !== action.id)\n    })\n}\n\nconst resetCart = (state ) => {\n    return updateObject( state, { \n      cart: []\n    })\n}\n\nconst increase = (state, action) => {\n    let tempCart = state.cart.map(cartItem => {\n        if (cartItem.id === action.id)\n            cartItem = { ...cartItem, qte: cartItem.qte + 1 };\n        return cartItem;\n    })\n    return { ...state, cart: tempCart }\n}\n\nconst decrease = (state, action) => {\n    let tempCart = state.cart.map(cartItem => {\n        if (cartItem.id === action.id)\n            cartItem = { ...cartItem, qte: cartItem.qte - 1 };\n        return cartItem;\n    })\n    return { ...state, cart: tempCart }\n}\n\nconst getTotals = (state) => {\n    let { total, qte } = state.cart.reduce(\n        (cartTotal, cartItem) => {\n            const itemTotal = cartItem.price * cartItem.qte;\n            cartTotal.total += itemTotal;\n            cartTotal.qte += cartItem.qte;\n            return cartTotal;\n        },\n        {\n            total: 0,\n            qte: 0\n        }\n    );\n    total = parseFloat(total.toFixed(2));\n    return {...state, total, qte}\n}\n\nconst reducer = ( state = initialState, action ) => {\n  switch ( action.type ) {\n    case actionTypes.ADD_TO_CART: return addToCart(state, action);\n    case actionTypes.REMOVE_TO_CART: return removeToCart(state, action);\n    case actionTypes.RESET_CART: return resetCart(state, action);\n    case actionTypes.INCREASE: return increase(state, action);\n    case actionTypes.DECREASE: return decrease(state, action);\n    case actionTypes.GET_TOTAL: return getTotals(state);\n    default: return state;\n  }\n}; \n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}