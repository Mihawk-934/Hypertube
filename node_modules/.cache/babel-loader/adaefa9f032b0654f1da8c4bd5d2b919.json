{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from '../../containers/Home/MoviesList/api';\nexport const movies = movies => {\n  return {\n    type: actionTypes.MOVIES,\n    movies: movies\n  };\n};\nexport const filtres = filtres => {\n  return dispatch => {\n    let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_ADULT}${PATH_LANGUE}fr`;\n    if (!!filtres.genre.value) url += `&with_genres=${filtres.genre.value}`;\n    if (!!filtres.years.value) url += `&primary_release_year=${filtres.years.value}`;\n    if (!!filtres.sortby.value) url += `&sort_by=${filtres.sortby.value}`;\n    axios.get(url).then(response => {\n      dispatch(movies(response.data.results));\n    }).catch(err => console.log(err));\n  };\n};\nexport const textSearch = textSearch => {\n  console.log(textSearch);\n  return dispatch => {\n    axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`).then(response => {\n      dispatch(movies(response.data.results));\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/store/actions/filtres.js"],"names":["actionTypes","axios","API_KEY","PATH_BASE","PATH_DISCOVER","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","movies","type","MOVIES","filtres","dispatch","url","genre","value","years","sortby","get","then","response","data","results","catch","err","console","log","textSearch"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,aAA7B,EAA4CC,UAA5C,EAAwDC,WAAxD,EAAqEC,SAArE,EAAgFC,UAAhF,EAA4FC,WAA5F,QAAgH,sCAAhH;AAGA,OAAO,MAAMC,MAAM,GAAIA,MAAD,IAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAEX,WAAW,CAACY,MADf;AAEHF,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,OAAO,GAAIA,OAAD,IAAa;AAChC,SAAOC,QAAQ,IAAI;AACf,QAAIC,GAAG,GAAI,GAAEZ,SAAU,GAAEC,aAAc,GAAEC,UAAW,GAAEH,OAAQ,GAAEK,SAAU,IAAGC,UAAW,GAAEC,WAAY,IAAtG;AACA,QAAI,CAAC,CAACI,OAAO,CAACG,KAAR,CAAcC,KAApB,EACIF,GAAG,IAAK,gBAAeF,OAAO,CAACG,KAAR,CAAcC,KAAM,EAA3C;AACJ,QAAI,CAAC,CAACJ,OAAO,CAACK,KAAR,CAAcD,KAApB,EACIF,GAAG,IAAK,yBAAwBF,OAAO,CAACK,KAAR,CAAcD,KAAM,EAApD;AACJ,QAAI,CAAC,CAACJ,OAAO,CAACM,MAAR,CAAeF,KAArB,EACIF,GAAG,IAAK,YAAWF,OAAO,CAACM,MAAR,CAAeF,KAAM,EAAxC;AACJhB,IAAAA,KAAK,CAACmB,GAAN,CAAUL,GAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACdR,MAAAA,QAAQ,CAACJ,MAAM,CAACY,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAAP,CAAR;AACH,KAHL,EAIKC,KAJL,CAIWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAJlB;AAKH,GAbD;AAcH,CAfM;AAiBP,OAAO,MAAMG,UAAU,GAAIA,UAAD,IAAgB;AACtCF,EAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ;AACA,SAAOf,QAAQ,IAAI;AACfb,IAAAA,KAAK,CAACmB,GAAN,CAAW,GAAEjB,SAAU,GAAEG,WAAY,GAAED,UAAW,GAAEH,OAAQ,GAAEK,SAAU,IAAGE,WAAY,KAAID,UAAW,WAAUqB,UAAW,EAA3H,EACKR,IADL,CACUC,QAAQ,IAAI;AACdR,MAAAA,QAAQ,CAACJ,MAAM,CAACY,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAAP,CAAR;AACH,KAHL,EAIKC,KAJL,CAIWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAJlB;AAKH,GAND;AAOH,CATM","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from  '../../containers/Home/MoviesList/api';\n\n\nexport const movies = (movies) => {\n    return {\n        type: actionTypes.MOVIES,\n        movies: movies\n    }\n};\n\nexport const filtres = (filtres) => {\n    return dispatch => {\n        let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_ADULT}${PATH_LANGUE}fr`;\n        if (!!filtres.genre.value)\n            url += `&with_genres=${filtres.genre.value}`;\n        if (!!filtres.years.value)\n            url += `&primary_release_year=${filtres.years.value}`;\n        if (!!filtres.sortby.value)\n            url += `&sort_by=${filtres.sortby.value}`;\n        axios.get(url)\n            .then(response => {\n                dispatch(movies(response.data.results));\n            })\n            .catch(err => console.log(err))\n    }\n}\n\nexport const textSearch = (textSearch) => {\n    console.log(textSearch)\n    return dispatch => {\n        axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}1${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`)\n            .then(response => {\n                dispatch(movies(response.data.results));\n            })\n            .catch(err => console.log(err))\n    }\n};"]},"metadata":{},"sourceType":"module"}