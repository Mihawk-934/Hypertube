{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Auth/authPhone.jsx\";\nimport React, { Component } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport firebase from '../../fire';\nimport * as regex from './Regex';\nimport { withRouter } from 'react-router-dom';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nclass Phone extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      phone: null,\n      codeVerification: null,\n      error: {},\n      errorCatch: '',\n      disable: true,\n      disable1: true,\n      confirmResult: null,\n      show: false,\n      codeError: null\n    };\n\n    this.handleFormValidcode = () => {\n      let store = '';\n      const error = { ...this.state.error\n      };\n      const values = Object.values(error);\n\n      for (const key of values) store += key;\n\n      Object.keys(error).length === 1 && store.length === 0 ? this.setState({\n        disable1: false\n      }) : this.setState({\n        disable1: true\n      }, () => {\n        console.log(this.state.disable1);\n      });\n    };\n\n    this.handleFormValidphone = () => {\n      this.setState({}, () => {});\n    };\n\n    this.handleInputValid = (name_input, value_input) => {\n      let error = { ...this.state.error\n      };\n\n      switch (name_input) {\n        case 'phone':\n          value_input.match(regex.phoneNumber) ? error[name_input] = '' : error[name_input] = \"*Numero non valide. ex : +33601020304\";\n          break;\n\n        case 'codeVerification':\n          value_input.match(regex.codeVerification) && value_input.length > 5 ? error[name_input] = '' : error[name_input] = \"*Mauvais format 5 chiffres sont attendues\";\n          break;\n\n        default:\n          console.log(\"NUMBER NOT FOUND\");\n      }\n\n      this.setState({\n        error: error\n      }, () => {\n        this.handleFormValidphone();\n      });\n    };\n\n    this.handleInput = event => {\n      const nameInput = event.target.id;\n      const valueInput = event.target.value;\n      this.setState({\n        [event.target.id]: event.target.value\n      }, () => {\n        this.handleInputValid(nameInput, valueInput);\n      });\n    };\n\n    this.sendCode = e => {\n      e.preventDefault();\n      firebase.auth().languageCode = 'fr';\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\"recaptcha-container\", {\n        size: \"invisible\"\n      });\n      let phoneNumber = this.state.phone;\n      let appVerifier = window.recaptchaVerifier;\n      firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier).then(confirmationResult => {\n        this.setState({\n          show: true\n        });\n        window.confirmationResult = confirmationResult;\n      }).catch(error => {\n        this.setState({\n          errorCatch: error.message\n        });\n      });\n    };\n\n    this.receiveCode = e => {\n      e.preventDefault();\n      const verificationId = this.state.codeVerification;\n      window.confirmationResult.confirm(verificationId).then(result => {\n        localStorage.setItem('id', result.user.uid);\n        localStorage.setItem('token', result.user.ma);\n        this.props.onPhone(result.user.ma, result.user.uid);\n        this.props.history.push('/home');\n      }).catch(error => {\n        this.setState({\n          codeError: 'Error lors de la verification du code: code invalide'\n        });\n      });\n    };\n  }\n\n  render() {\n    let msg;\n    let formcode;\n    let formphone;\n    let msgCatch;\n    msg = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }, this.state.error.phone);\n    if (this.state.errorCatch && this.state.codeError === null) msgCatch = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 24\n      }\n    }, \"Trop d'essai votre compte a \\xE9t\\xE9 suspendu temporairement.\");\n    if (this.state.codeError) msgCatch = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 24\n      }\n    }, \"le code ne coresspond pas a celui qui vous a \\xE9t\\xE9 envoyer veuillez ressayer\");\n    if (this.state.show && this.state.codeError === null) msgCatch = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 24\n      }\n    }, \"Un code vient de vous etre envoyer par SMS.\");\n\n    if (this.state.show === false) {\n      formphone = /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }, \"Connexion via Smarthpone\"), /*#__PURE__*/React.createElement(Form.Control, {\n        id: \"phone\",\n        type: \"tel\",\n        placeholder: \"Entrer votre numero de telephone ex :+33625145895\",\n        onChange: e => this.handleInput(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Form.Text, {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }\n      }, this.state.error.phone ? msg : null), /*#__PURE__*/React.createElement(Button, {\n        id: \"recaptcha-container\",\n        disabled: this.state.disable,\n        onClick: e => this.sendCode(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }\n      }, \"Envoyer code\"));\n    }\n\n    if (this.state.show) {\n      formcode = /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }, \"Connexion via Smarthpone\"), /*#__PURE__*/React.createElement(Form.Control, {\n        id: \"codeVerification\",\n        type: \"tel\",\n        placeholder: \"Entrer le code de verification\",\n        onChange: e => this.handleInput(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Form.Text, {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }\n      }, this.state.error.codeVerification), /*#__PURE__*/React.createElement(Button, {\n        id: \"code\",\n        disabled: this.state.disable1,\n        onClick: e => this.receiveCode(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }\n      }, \"S'inscrire\"));\n    }\n\n    return /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, msgCatch, formcode, formphone);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onPhone: (token, userId) => dispatch(actions.authSuccess(token, userId))\n  };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(Phone));","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Auth/authPhone.jsx"],"names":["React","Component","Button","Form","firebase","regex","withRouter","actions","connect","Phone","state","phone","codeVerification","error","errorCatch","disable","disable1","confirmResult","show","codeError","handleFormValidcode","store","values","Object","key","keys","length","setState","console","log","handleFormValidphone","handleInputValid","name_input","value_input","match","phoneNumber","handleInput","event","nameInput","target","id","valueInput","value","sendCode","e","preventDefault","auth","languageCode","window","recaptchaVerifier","RecaptchaVerifier","size","appVerifier","signInWithPhoneNumber","then","confirmationResult","catch","message","receiveCode","verificationId","confirm","result","localStorage","setItem","user","uid","ma","props","onPhone","history","push","render","msg","formcode","formphone","msgCatch","onSubmit","mapDispatchToProps","dispatch","token","userId","authSuccess"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {Button, Form} from 'react-bootstrap'\nimport firebase from '../../fire';\nimport * as regex from './Regex'\nimport { withRouter } from 'react-router-dom';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nclass Phone extends Component {\n    state = {\n        phone:null,\n        codeVerification:null,\n        error:{},\n        errorCatch:'',\n        disable:true,\n        disable1:true,\n        confirmResult: null,\n        show: false,\n        codeError:null\n    }\n\n    handleFormValidcode = () => { \n        let store = ''; \n        const error = {...this.state.error};\n        const values = Object.values(error)\n        for (const key of values)\n            store += key;\n        Object.keys(error).length===1 && store.length===0? this.setState({disable1:false}):this.setState({disable1:true},()=>{console.log(this.state.disable1)});\n    }\n\n    handleFormValidphone = () => {\n        this.setState({}, () => {\n\n        })\n      \n    }\n\n    handleInputValid = (name_input,value_input) => {\n        let error = {...this.state.error};\n        switch(name_input){\n            case 'phone': value_input.match(regex.phoneNumber)  ? error[name_input]='' : error[name_input] = \"*Numero non valide. ex : +33601020304\";\n                break;\n            case 'codeVerification':value_input.match(regex.codeVerification) && value_input.length>5 ? error[name_input]='' : error[name_input] = \"*Mauvais format 5 chiffres sont attendues\";\n                 break;\n            default:\n                console.log(\"NUMBER NOT FOUND\");\n        }\n        this.setState({error:error}, () => {this.handleFormValidphone()});\n    }\n     \n    handleInput = (event) => {\n        const nameInput = event.target.id;\n        const valueInput = event.target.value;\n        this.setState({[event.target.id]:event.target.value},\n            () => {this.handleInputValid(nameInput,valueInput)    \n        });\n    }\n\n    sendCode = (e) => {  \n        e.preventDefault();\n        firebase.auth().languageCode = 'fr';\n        window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\"recaptcha-container\",\n        {\n           size:\"invisible\"\n        });\n        let phoneNumber = this.state.phone;\n        let appVerifier = window.recaptchaVerifier;\n        firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier)\n        .then(confirmationResult => { \n            this.setState({show:true})\n            window.confirmationResult = confirmationResult;\n        })\n        .catch(error => {\n            this.setState({errorCatch:error.message})\n        });\n    }\n    \n    receiveCode= (e) => {\n        e.preventDefault();\n        const verificationId = this.state.codeVerification;\n        window.confirmationResult\n        .confirm(verificationId)\n        .then(result => {\n            localStorage.setItem('id',result.user.uid)\n            localStorage.setItem('token', result.user.ma)\n            this.props.onPhone(result.user.ma,result.user.uid);\n            this.props.history.push('/home')\n        })\n        .catch(error => {\n            this.setState({codeError:'Error lors de la verification du code: code invalide'})\n        });\n    }\n   \n    render() {\n        let msg;\n        let formcode;\n        let formphone;\n        let msgCatch;\n       \n        msg = <p>{this.state.error.phone}</p>;\n\n        if (this.state.errorCatch && this.state.codeError === null)\n            msgCatch = <p>Trop d'essai votre compte a été suspendu temporairement.</p>\n        \n        if (this.state.codeError)\n            msgCatch = <p>le code ne coresspond pas a celui qui vous a été envoyer veuillez ressayer</p>\n  \n        if (this.state.show && this.state.codeError === null)\n            msgCatch = <p>Un code vient de vous etre envoyer par SMS.</p>\n        \n        if (this.state.show === false){\n            formphone= (\n                <Form.Group >\n                    <Form.Label>Connexion via Smarthpone</Form.Label> \n                    <Form.Control id=\"phone\" type=\"tel\" placeholder=\"Entrer votre numero de telephone ex :+33625145895\"   onChange={(e)=>this.handleInput(e)}/>\n                    <Form.Text className=\"text-muted\">         \n                        {this.state.error.phone ? msg : null }     \n                    </Form.Text>\n                    <Button id=\"recaptcha-container\" disabled={this.state.disable} onClick={(e)=>this.sendCode(e)}>\n                        Envoyer code\n                    </Button>\n                </Form.Group>\n            )\n        }\n        \n        if (this.state.show){\n            formcode = (\n                <Form.Group >\n                    <Form.Label>Connexion via Smarthpone</Form.Label>\n                    <Form.Control id=\"codeVerification\" type=\"tel\" placeholder=\"Entrer le code de verification\" onChange={(e)=>this.handleInput(e)} />\n                    <Form.Text className=\"text-muted\">         \n                        {this.state.error.codeVerification}   \n                    </Form.Text>\n                    <Button id=\"code\" disabled={this.state.disable1} onClick={(e)=>this.receiveCode(e)}>\n                        S'inscrire\n                    </Button> \n                </Form.Group>\n            )\n        }\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n                {msgCatch}\n                {formcode}\n                {formphone}\n            </Form>   \n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onPhone: (token, userId) => dispatch(actions.authSuccess(token, userId))\n    };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps) (Phone));\n"]},"metadata":{},"sourceType":"module"}