{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from '../../containers/Home/MoviesList/api';\nexport const initialise = value => {\n  return {\n    type: actionTypes.INITIALISE,\n    value: value\n  };\n};\nexport const initialiseFiltres = () => {\n  return {\n    type: actionTypes.INITIALISE_FILTRES\n  };\n};\nexport const initialiseTextSearch = () => {\n  console.log('initi');\n  return {\n    type: actionTypes.INITIALISE_TEXTSEARCH\n  };\n};\nexport const filtres = filtres => {\n  return {\n    type: actionTypes.FILTRES,\n    filtres: filtres\n  };\n};\nexport const textSearch = textSearch => {\n  return {\n    type: actionTypes.TEXT_SEARCH,\n    textSearch: textSearch\n  };\n};\nexport const movies = (movies, nbPage, page, next, noResult) => {\n  return {\n    type: actionTypes.MOVIES,\n    newMovies: movies,\n    nbPage: nbPage,\n    page: page,\n    next: next,\n    noResult: noResult\n  };\n};\nexport const popularRequest = page => {\n  return dispatch => {\n    axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${page}`).then(response => {\n      dispatch(movies(response.data.results, response.data.total_pages, page, 'popular'));\n    }).catch(err => console.log(err));\n  };\n};\nexport const filtresRequest = (filtres, page) => {\n  return dispatch => {\n    let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_ADULT}${PATH_LANGUE}fr`;\n    if (!!filtres.genre.value) url += `&with_genres=${filtres.genre.value}`;\n    if (!!filtres.years.value) url += `&primary_release_year=${filtres.years.value}`;\n    if (!!filtres.sortby.value) url += `&sort_by=${filtres.sortby.value}`;\n    axios.get(url).then(response => {\n      dispatch(movies(response.data.results, response.data.total_pages, page, 'filtres'));\n    }).catch(err => console.log(err));\n  };\n};\nexport const textSearchRequest = (textSearch, page) => {\n  return dispatch => {\n    axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`).then(response => {\n      let noResult;\n      response.data.total_results === 0 ? noResult = true : noResult = false;\n      console.log(noResult);\n      dispatch(movies(response.data.results, response.data.total_pages, page, 'textSearch', noResult));\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/store/actions/filtres.js"],"names":["actionTypes","axios","API_KEY","PATH_BASE","PATH_DISCOVER","PATH_MOVIE","PATH_SEARCH","PATH_PAGE","PATH_ADULT","PATH_LANGUE","initialise","value","type","INITIALISE","initialiseFiltres","INITIALISE_FILTRES","initialiseTextSearch","console","log","INITIALISE_TEXTSEARCH","filtres","FILTRES","textSearch","TEXT_SEARCH","movies","nbPage","page","next","noResult","MOVIES","newMovies","popularRequest","dispatch","get","then","response","data","results","total_pages","catch","err","filtresRequest","url","genre","years","sortby","textSearchRequest","total_results"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { API_KEY, PATH_BASE, PATH_DISCOVER, PATH_MOVIE, PATH_SEARCH, PATH_PAGE, PATH_ADULT, PATH_LANGUE } from  '../../containers/Home/MoviesList/api';\n\nexport const initialise = (value) => {\n    return {\n        type: actionTypes.INITIALISE,\n        value: value\n    }\n};\n\nexport const initialiseFiltres = () => {\n    return {\n        type: actionTypes.INITIALISE_FILTRES,\n    }\n};\n\nexport const initialiseTextSearch = () => {\n    console.log('initi')\n    return {\n        type: actionTypes.INITIALISE_TEXTSEARCH,\n    }\n};\n\nexport const filtres = (filtres) => {\n    return {\n        type: actionTypes.FILTRES,\n        filtres: filtres\n    }\n};\n\nexport const textSearch = (textSearch) => {\n    return {\n        type: actionTypes.TEXT_SEARCH,\n        textSearch: textSearch\n    }\n};\n\nexport const movies = (movies, nbPage, page, next, noResult) => {\n    return {\n        type: actionTypes.MOVIES,\n        newMovies: movies,\n        nbPage: nbPage,\n        page: page,\n        next: next,\n        noResult: noResult\n    }\n};\n\nexport const popularRequest = (page) => {\n    return dispatch => {\n        axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=1e32f5c452c2267d5367589e9864ab1c&language=fr&page=${page}`)\n            .then(response => {\n                dispatch(movies(response.data.results, response.data.total_pages, page, 'popular'));\n            })\n            .catch(err => console.log(err));\n    }\n};\n\nexport const filtresRequest = (filtres, page) => {\n    return dispatch => {\n        let url = `${PATH_BASE}${PATH_DISCOVER}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_ADULT}${PATH_LANGUE}fr`;\n        if (!!filtres.genre.value)\n            url += `&with_genres=${filtres.genre.value}`;\n        if (!!filtres.years.value)\n            url += `&primary_release_year=${filtres.years.value}`;\n        if (!!filtres.sortby.value)\n            url += `&sort_by=${filtres.sortby.value}`;\n        axios.get(url)\n            .then(response => {\n                dispatch(movies(response.data.results, response.data.total_pages, page, 'filtres'));\n            })\n            .catch(err => console.log(err));\n    }\n};\n\nexport const textSearchRequest = (textSearch, page) => {\n    return dispatch => {\n        axios.get(`${PATH_BASE}${PATH_SEARCH}${PATH_MOVIE}${API_KEY}${PATH_PAGE}${page}${PATH_LANGUE}fr${PATH_ADULT}\"&query=${textSearch}`)\n            .then(response => {\n                let noResult ;\n                response.data.total_results === 0 ? noResult = true : noResult = false; \n                console.log(noResult);\n                dispatch(movies(response.data.results, response.data.total_pages, page, 'textSearch', noResult));\n            })\n            .catch(err => console.log(err));\n    }\n};\n"]},"metadata":{},"sourceType":"module"}