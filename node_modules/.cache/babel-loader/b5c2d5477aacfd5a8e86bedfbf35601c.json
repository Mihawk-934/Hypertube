{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx\";\nimport React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\n\nclass MoviesList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      hasMore: true\n    };\n\n    this.newMovie = () => {\n      if (this.props.nbPage !== 0 && this.state.page > this.props.nbPage) {\n        this.setState({\n          hasMore: false\n        });\n        return;\n      }\n\n      this.props.popular(this.props.page + 1);\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.filtres);\n    if (this.props.movies.length === 0) this.newMovie();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.filtres !== this.props.filtres) {\n      console.log(this.props.filtres);\n    } else if (prevProps.textSearch !== this.props.textSearch) {\n      console.log(this.props.textSearch);\n    }\n  }\n\n  render() {\n    let movies = null;\n    if (this.props.movies !== null && this.props.movies.length > 0) movies = /*#__PURE__*/React.createElement(MovieItems, {\n      movies: this.props.movies,\n      clicked: () => this.clicked(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 16\n      }\n    });\n    if (this.props.movies.length === 0) movies = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 16\n      }\n    }, \"Il y a 0 resultat.\"); //CREER UNE VARIABLE DANS LE STORE ET L'UTILISER POUR FAIRE DES IF ELSE IF ET SAVOIR QUE METTRE DANS NEXT EN FONCTION DES FITLRES.\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      dataLength: this.props.movies.length,\n      next: this.newMovie,\n      hasMore: this.state.hasMore,\n      loader: /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 19\n        }\n      }, \"Loading...\"),\n      endMessage: /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 58\n        }\n      }, \"Yay! Vous avez tout vu\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, movies));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    page: state.filtres.page,\n    movies: state.filtres.movies,\n    nbPage: state.filtres.nbPage,\n    filtres: state.filtres.filtres,\n    textSearch: state.filtres.textSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    popular: page => dispatch(actions.popular(page))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesList);","map":{"version":3,"sources":["/Users/miclaude/Desktop/react/Netflix/netflix2/src/containers/Home/MoviesList/MoviesList.jsx"],"names":["React","Component","InfiniteScroll","connect","MovieItems","actions","MoviesList","state","hasMore","newMovie","props","nbPage","page","setState","popular","componentDidMount","console","log","filtres","movies","length","componentDidUpdate","prevProps","textSearch","render","clicked","color","textAlign","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { connect } from \"react-redux\";\nimport \"./MoviesList.css\";\nimport MovieItems from \"./MoviesItems/MoviesItems\";\nimport * as actions from '../../../store/actions/index';\n\nclass MoviesList extends Component {\n  state = {\n  \n    hasMore: true,\n  }\n \n  componentDidMount () {\n    console.log(this.props.filtres);\n    if (this.props.movies.length === 0)\n      this.newMovie();\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.filtres !== this.props.filtres) {\n      console.log(this.props.filtres);\n    }\n    else if (prevProps.textSearch !== this.props.textSearch) {\n      console.log(this.props.textSearch);\n    } \n  }\n\n  newMovie = () => {\n    if (this.props.nbPage !== 0 && this.state.page > this.props.nbPage) {\n      this.setState({ hasMore: false });\n      return;\n    }\n    this.props.popular(this.props.page + 1);\n  };\n\n  render() {\n    let movies = null;\n    if (this.props.movies !== null && this.props.movies.length > 0) \n      movies = <MovieItems movies={this.props.movies} clicked={() => this.clicked()}/>\n    if (this.props.movies.length === 0)\n      movies = <p style={{ color: \"white\" }}>Il y a 0 resultat.</p>\n\n    //CREER UNE VARIABLE DANS LE STORE ET L'UTILISER POUR FAIRE DES IF ELSE IF ET SAVOIR QUE METTRE DANS NEXT EN FONCTION DES FITLRES.\n    return (\n      <div className=\"block\">\n        <InfiniteScroll\n          dataLength={this.props.movies.length}\n          next={this.newMovie}\n          hasMore={this.state.hasMore}\n          loader={<h4>Loading...</h4>}\n          endMessage={<p style={{ textAlign: \"center\" }}><b>Yay! Vous avez tout vu</b></p>}>\n          {movies}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    page: state.filtres.page,\n    movies: state.filtres.movies,\n    nbPage: state.filtres.nbPage,\n    filtres: state.filtres.filtres,\n    textSearch: state.filtres.textSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    popular: (page) => dispatch(actions.popular(page))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesList);"]},"metadata":{},"sourceType":"module"}