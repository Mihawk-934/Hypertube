{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/Netflix_Project/src/containers/Movie/Movie.jsx\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport Video from './Video/Video';\nimport Slider from './Slider/Slider';\nimport { Container } from 'react-bootstrap';\nimport Presentation from './Presentation/Presentation';\nimport './Movie.css';\nimport Aos from 'aos';\nimport 'aos/dist/aos.css';\n\nclass MovieId extends Component {\n  constructor(...args) {\n    super(...args);\n    this._isMounted = false;\n    this.state = {\n      movie: '',\n      genre: [],\n      years: '',\n      youtubeKey: '',\n      acteurs: []\n    };\n\n    this.infoMovie = () => {\n      axios.get(`https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=1e32f5c452c2267d5367589e9864ab1c&append_to_response=videos,credits,similar&language=fr`).then(response => {\n        let similar = response.data.similar.results.slice(0, 20);\n        let acteurs = response.data.credits.cast.splice(0, 4);\n        acteurs = acteurs.map(acteur => {\n          return { ...acteur,\n            img: true\n          };\n        });\n        let youtubeKey = null;\n        if (response.data.videos.results.length !== 0) youtubeKey = response.data.videos.results[0].key;\n        let data = { ...response.data,\n          release_date: response.data.release_date.substr(0, 4),\n          acteurs: acteurs,\n          youtubeKey: youtubeKey,\n          similar: similar\n        };\n        this.setState({\n          movie: data\n        });\n      }).catch(err => console.log(err));\n      window.scrollTo(0, 0);\n    };\n\n    this.submit = e => {\n      e.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    Aos.init();\n    this._isMounted = true;\n    if (this._isMounted) this.infoMovie();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.params.id !== prevProps.match.params.id) this.infoMovie();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    let movieBackdropStyles = null;\n\n    if (!!this.state.movie.backdrop_path) {\n      movieBackdropStyles = {\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${this.state.movie.backdrop_path})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: '100vh',\n        backgroundColor: 'black',\n        backgroundPosition: 'center'\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Page\",\n      style: movieBackdropStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: \"Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      \"data-aos\": \"flip-left\",\n      \"data-aos-duration\": \"2000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, this.state.movie && /*#__PURE__*/React.createElement(Presentation, {\n      movie: this.state.movie,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 46\n      }\n    }), this.state.movie.youtubeKey && /*#__PURE__*/React.createElement(Video, {\n      id: this.state.movie.youtubeKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 57\n      }\n    }), this.state.movie.similar && /*#__PURE__*/React.createElement(Slider, {\n      similar: this.state.movie.similar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 55\n      }\n    }))));\n  }\n\n}\n\n;\nexport default withRouter(MovieId);","map":{"version":3,"sources":["/Users/miclaude/Desktop/Netflix_Project/src/containers/Movie/Movie.jsx"],"names":["React","Component","withRouter","axios","Video","Slider","Container","Presentation","Aos","MovieId","_isMounted","state","movie","genre","years","youtubeKey","acteurs","infoMovie","get","props","match","params","id","then","response","similar","data","results","slice","credits","cast","splice","map","acteur","img","videos","length","key","release_date","substr","setState","catch","err","console","log","window","scrollTo","submit","e","preventDefault","componentDidMount","init","componentDidUpdate","prevProps","componentWillUnmount","render","movieBackdropStyles","backdrop_path","backgroundImage","backgroundRepeat","backgroundSize","minHeight","backgroundColor","backgroundPosition"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport Video from './Video/Video';\nimport Slider from './Slider/Slider';\nimport { Container } from 'react-bootstrap';\nimport Presentation from './Presentation/Presentation';\nimport './Movie.css';\nimport Aos from 'aos';\nimport 'aos/dist/aos.css';\n\nclass MovieId extends Component {\n    _isMounted = false;\n    state = {\n        movie : '',\n        genre: [],\n        years: '',\n        youtubeKey: '',\n        acteurs: []\n    };\n\n    componentDidMount () {\n        Aos.init();\n        this._isMounted = true;\n        if (this._isMounted)\n            this.infoMovie();\n    };\n\n    componentDidUpdate (prevProps) {\n        if (this.props.match.params.id !== prevProps.match.params.id)\n            this.infoMovie();\n    };\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    };\n\n    infoMovie = () => {\n        axios.get(`https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=1e32f5c452c2267d5367589e9864ab1c&append_to_response=videos,credits,similar&language=fr`)\n            .then(response => {\n                let similar = response.data.similar.results.slice(0, 20);\n                let acteurs = response.data.credits.cast.splice(0, 4);\n                acteurs = acteurs.map(acteur => {\n                    return {...acteur,\n                        img: true\n                    }\n                }) \n                let youtubeKey = null\n                if (response.data.videos.results.length !== 0)\n                    youtubeKey = response.data.videos.results[0].key\n                let data = {...response.data, release_date: response.data.release_date.substr(0, 4), acteurs : acteurs, youtubeKey : youtubeKey, similar: similar}\n                this.setState({movie: data})\n                }\n            )\n            .catch(err => console.log(err));\n            window.scrollTo(0, 0);\n    };\n\n    submit = (e) => {\n        e.preventDefault();\n    };\n\n    render () { \n        let movieBackdropStyles = null;\n        if (!!this.state.movie.backdrop_path) {\n            movieBackdropStyles = {\n                backgroundImage: `url(https://image.tmdb.org/t/p/original/${this.state.movie.backdrop_path})`,\n                backgroundRepeat: 'no-repeat',\n                backgroundSize:'cover',\n                minHeight:'100vh',\n                backgroundColor: 'black',\n                backgroundPosition:'center' \n            };\n        }\n\n        return (\n            <div className=\"Page\" style={movieBackdropStyles}>\n                <Container className='Container'>\n                    <div data-aos=\"flip-left\" data-aos-duration=\"2000\">\n                        {this.state.movie && <Presentation movie={this.state.movie}/>}\n                        {this.state.movie.youtubeKey && <Video id={this.state.movie.youtubeKey}/>}\n                        {this.state.movie.similar  && <Slider similar={this.state.movie.similar}/>}\n                    </div>\n                </Container>\n            </div>\n        );\n    };\n};\n\nexport default withRouter(MovieId);\n"]},"metadata":{},"sourceType":"module"}